{
  "info": {
    "title": "authn",
    "description": "Secure login and user management",
    "version": "2",
    "contact": {
      "name": "Pangea",
      "url": "https://pangea.cloud/docs/support",
      "email": "support@pangea.cloud"
    }
  },
  "servers": [
    {
      "url": "https://authn.aws.us.pangea.cloud",
      "description": "Pangea regional service cluster"
    },
    {
      "url": "https://authn.aws.us-east.pangea.cloud",
      "description": "Pangea regional service cluster"
    },
    {
      "url": "https://authn.aws.eu.pangea.cloud",
      "description": "Pangea regional service cluster"
    }
  ],
  "paths": {
    "/v1beta/config": {
      "post": {
        "operationId": "authn_post_v1beta_config",
        "summary": "Get service configuration for AuthN",
        "description": "Get service configuration for AuthN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-service-config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The service configuration for AuthN",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn"]
      }
    },
    "/v1beta/config/create": {
      "post": {
        "operationId": "authn_post_v1beta_config_create",
        "summary": "Create a service configuration for AuthN",
        "description": "Create a service configuration for AuthN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-service-config-filled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created service configuration for AuthN",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn"]
      }
    },
    "/v1beta/config/update": {
      "post": {
        "operationId": "authn_post_v1beta_config_update",
        "summary": "Update a service configuration for AuthN",
        "description": "Update a service configuration for AuthN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-service-config-filled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated service configuration for AuthN",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn"]
      }
    },
    "/v1beta/config/delete": {
      "post": {
        "operationId": "authn_post_v1beta_config_delete",
        "summary": "Delete a service configuration for AuthN",
        "description": "Delete a service configuration for AuthN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-service-config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The deleted service configuration for AuthN",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn"]
      }
    },
    "/v2/client/token/check": {
      "post": {
        "operationId": "authn_post_v2_client_token_check",
        "summary": "Get token",
        "description": "Look up a token and return its contents.",
        "tags": ["authn", "v2-flow"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/authn-token"
                  }
                },
                "required": ["token"],
                "additionalProperties": false,
                "examples": [
                  {
                    "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information associated with the token",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-token-info-user-nocreds"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/userinfo": {
      "post": {
        "operationId": "authn_post_v2_client_userinfo",
        "summary": "Get current user | Client token",
        "description": "Retrieve the logged in user's token and information.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/authn-ticket-id",
                    "description": "Login code returned by the login callback"
                  },
                  "flow_id": {
                    "$ref": "#/components/schemas/authn-flow-id"
                  }
                },
                "required": ["code"],
                "additionalProperties": false,
                "examples": [
                  {
                    "code": "pmc_d6chl6qulpn3it34oerwm3cqwsjd6dxw"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's login session",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-session-info-creds"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/flow/complete": {
      "post": {
        "operationId": "authn_post_v2_flow_complete",
        "summary": "Complete sign-up/sign-in",
        "description": "Complete a sign-up or sign-in flow.",
        "tags": ["authn", "v2-flow"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flow_id": {
                    "$ref": "#/components/schemas/authn-flow-id"
                  },
                  "device_id": {
                    "type": "string"
                  }
                },
                "required": ["flow_id"],
                "examples": [
                  {
                    "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The login session resulting from the sign-up or sign-in flow",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-flow-complete-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/flow/restart": {
      "post": {
        "operationId": "authn_post_v2_flow_restart",
        "summary": "Restart a sign-up/sign-in flow",
        "description": "Restart a sign-up/sign-in flow choice.",
        "tags": ["authn", "v2-flow"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-flow2-restart",
                "examples": [
                  {
                    "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh",
                    "choice": "email_otp",
                    "data": {}
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Available choices for the next steps of the sign-up or sign-in flow",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-flow2-choices",
                          "examples": [
                            {
                              "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh",
                              "flow_type": ["signin"],
                              "email": "joe.user@email.com",
                              "flow_phase": "phase_secondary",
                              "flow_choices": [
                                {
                                  "choice": "email_otp",
                                  "data": {
                                    "sent": true,
                                    "enrollment": false,
                                    "resend_time": "2023-09-18T12:01:05Z"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/flow/start": {
      "post": {
        "operationId": "authn_post_v2_flow_start",
        "summary": "Start a sign-up/sign-in flow",
        "description": "Start a new sign-up or sign-in flow.",
        "tags": ["authn", "v2-flow"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "cb_uri": {
                    "$ref": "#/components/schemas/authn-callback"
                  },
                  "flow_types": {
                    "$ref": "#/components/schemas/authn-flow-types"
                  },
                  "invitation": {
                    "$ref": "#/components/schemas/authn-ticket-id"
                  },
                  "saml_idp_initiated_ticket": {
                    "$ref": "#/components/schemas/authn-ticket-id"
                  }
                },
                "required": [],
                "examples": [
                  {
                    "email": "joe.user@email.com",
                    "cb_uri": "https://www.myserver.com/callback",
                    "flow_types": ["signup", "signin"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Available choices for the next steps of the sign-up or sign-in flow",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-flow2-choices",
                          "examples": [
                            {
                              "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh",
                              "flow_type": ["signin"],
                              "email": "joe.user@email.com",
                              "flow_phase": "phase_primary",
                              "flow_choices": [
                                {
                                  "choice": "password",
                                  "data": {
                                    "enrollment": false,
                                    "password_policy": {
                                      "password_chars_min": 8,
                                      "password_chars_max": 64,
                                      "password_lower_min": 1,
                                      "password_upper_min": 1,
                                      "password_punct_min": 1
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/flow/update": {
      "post": {
        "operationId": "authn_post_v2_flow_update",
        "summary": "Update a sign-up/sign-in flow",
        "description": "Update a sign-up/sign-in flow.",
        "tags": ["authn", "v2-flow"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-flow2-update",
                "examples": [
                  {
                    "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh",
                    "choice": "password",
                    "data": {
                      "password": "My1s+Password"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Available choices for the next steps of the sign-up or sign-in flow",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-flow2-choices",
                          "examples": [
                            {
                              "flow_id": "pfl_dxiqyuq7ndc5ycjwdgmguwuodizcaqhh",
                              "flow_type": ["signin"],
                              "email": "joe.user@email.com",
                              "flow_phase": "phase_verify_email",
                              "flow_choices": [
                                {
                                  "choice": "verify_email",
                                  "data": {
                                    "sent": false,
                                    "resend_time": "0001-01-01T00:00:00Z",
                                    "state": "pcb_27z4vl5p46nsq3ggfqm7f2ar32gvm7q5"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/session/invalidate": {
      "post": {
        "operationId": "authn_post_v2_client_session_invalidate",
        "summary": "Invalidate session | Client token",
        "description": "Invalidate a session by session ID using a client token.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/authn-token-user"
                  },
                  "session_id": {
                    "$ref": "#/components/schemas/authn-token-id"
                  }
                },
                "required": ["token", "session_id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
                    "session_id": "pmt_zppkzrjguxyblaia6itbiesejn7jejnr"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session was invalidated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/session/list": {
      "post": {
        "operationId": "authn_post_v2_client_session_list",
        "summary": "List sessions | Client token",
        "description": "List sessions using a client token.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-tokens",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/authn-token-user"
                  }
                },
                "unevaluatedProperties": false,
                "required": ["token"],
                "examples": [
                  {
                    "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of the user's sessions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "sessions": {
                              "$ref": "#/components/schemas/authn-session-list"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "requred": ["sessions"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "sessions": [
                                {
                                  "id": "pmt_zppkzrjguxyblaia6itbiesejn7jejnr",
                                  "type": "session",
                                  "life": 172795,
                                  "expire": "2023-02-09T01:37:37.824893Z",
                                  "identity": "pui_np544voukdiohwbl2eyjrim5mvk5mzxp",
                                  "email": "joe.user@email.com",
                                  "profile": {
                                    "Login-Time": "2023-02-07T01:37:37.818764Z",
                                    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0",
                                    "first_name": "Joe",
                                    "last_name": "User",
                                    "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
                                  },
                                  "created_at": "2023-02-07T01:37:37.834374Z",
                                  "active_token": {
                                    "id": "pmt_oqbafh2ucqesnczphhjcimx7ucljiy73",
                                    "type": "user",
                                    "life": 172795,
                                    "expire": "2023-02-09T01:37:37.824893Z",
                                    "identity": "pui_np544voukdiohwbl2eyjrim5mvk5mzxp",
                                    "email": "joe.user@email.com",
                                    "profile": {
                                      "Login-Time": "2023-02-07T01:37:37.818764Z",
                                      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0",
                                      "first_name": "Joe",
                                      "last_name": "User",
                                      "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
                                    },
                                    "created_at": "2023-02-07T01:37:37.840371Z"
                                  }
                                }
                              ],
                              "last": "Mjoy"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/session/logout": {
      "post": {
        "operationId": "authn_post_v2_client_session_logout",
        "summary": "Log out | Client token",
        "description": "Log out the current user's session.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/authn-token-user"
                  }
                },
                "required": ["token"],
                "additionalProperties": false,
                "examples": [
                  {
                    "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session was logged out",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/session/refresh": {
      "post": {
        "operationId": "authn_post_v2_client_session_refresh",
        "summary": "Refresh session | Client token",
        "description": "Refresh a session token.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "$ref": "#/components/schemas/authn-token-refresh"
                  },
                  "user_token": {
                    "$ref": "#/components/schemas/authn-token-user"
                  }
                },
                "required": ["refresh_token"],
                "additionalProperties": false,
                "examples": [
                  {
                    "refresh_token": "ptr_xpkhwpnz2cmegsws737xbsqnmnuwtbm5",
                    "user_token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The refreshed session token",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-session-info-creds"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/session/invalidate": {
      "post": {
        "operationId": "authn_post_v2_session_invalidate",
        "summary": "Invalidate session",
        "description": "Invalidate a session by session ID.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": {
                    "$ref": "#/components/schemas/authn-token-id"
                  },
                  "user_initiated": {
                    "type": "boolean"
                  }
                },
                "required": ["session_id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "session_id": "pmt_zppkzrjguxyblaia6itbiesejn7jejnr"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session was invalidated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/session/logout": {
      "post": {
        "operationId": "authn_post_v2_session_logout",
        "summary": "Log out session",
        "description": "Invalidate all sessions belonging to a user.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "$ref": "#/components/schemas/authn-identity"
                  }
                },
                "required": ["user_id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "user_id": "pui_xpkhwpnz2cmegsws737xbsqnmnuwtvm5"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The users sessions were invalidated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/session/list": {
      "post": {
        "operationId": "authn_post_v2_session_list",
        "summary": "List sessions",
        "description": "List sessions.",
        "tags": ["authn", "v2-session-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-tokens",
                "examples": [
                  {
                    "filter": {
                      "email": "joe.user@email.com"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "sessions": {
                              "$ref": "#/components/schemas/authn-session-list"
                            },
                            "last": {
                              "type": "string"
                            },
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": ["sessions"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "sessions": [
                                {
                                  "id": "pmt_zppkzrjguxyblaia6itbiesejn7jejnr",
                                  "type": "session",
                                  "life": 172795,
                                  "expire": "2023-02-09T01:37:37.824893Z",
                                  "identity": "pui_np544voukdiohwbl2eyjrim5mvk5mzxp",
                                  "email": "joe.user@email.com",
                                  "profile": {
                                    "Login-Time": "2023-02-07T01:37:37.818764Z",
                                    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0",
                                    "first_name": "Joe",
                                    "last_name": "User",
                                    "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
                                  },
                                  "created_at": "2023-02-07T01:37:37.834374Z",
                                  "active_token": {
                                    "id": "pmt_oqbafh2ucqesnczphhjcimx7ucljiy73",
                                    "type": "user",
                                    "life": 172795,
                                    "expire": "2023-02-09T01:37:37.824893Z",
                                    "identity": "pui_np544voukdiohwbl2eyjrim5mvk5mzxp",
                                    "email": "joe.user@email.com",
                                    "profile": {
                                      "Login-Time": "2023-02-07T01:37:37.818764Z",
                                      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0",
                                      "first_name": "Joe",
                                      "last_name": "User",
                                      "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
                                    },
                                    "created_at": "2023-02-07T01:37:37.840371Z"
                                  }
                                }
                              ],
                              "last": "Mjoy"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/password/change": {
      "post": {
        "operationId": "authn_post_v2_client_password_change",
        "summary": "Change password | Client token",
        "description": "Change a user's password given the current password.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/authn-token-user"
                  },
                  "old_password": {
                    "type": "string"
                  },
                  "new_password": {
                    "type": "string"
                  }
                },
                "required": ["token", "old_password", "new_password"],
                "additionalProperties": false,
                "examples": [
                  {
                    "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
                    "old_password": "My1s+Password",
                    "new_password": "My2n+Password"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password was changed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/authenticators/delete": {
      "post": {
        "operationId": "authn_post_v2_user_authenticators_delete",
        "summary": "Delete user authenticator",
        "description": "Delete a user's authenticator.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  },
                  "authenticator_id": {
                    "$ref": "#/components/schemas/authn-authenticator-id"
                  }
                },
                "required": ["authenticator_id"],
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com",
                    "authenticator_id": "pau_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's authenticator was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/authenticators/list": {
      "post": {
        "operationId": "authn_post_v2_user_authenticators_list",
        "summary": "List user authenticators",
        "description": "Get user's authenticators by identity or email.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  }
                },
                "required": [],
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of the user's authenticators",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "authenticators": {
                              "$ref": "#/components/schemas/authn-v2-authenticator-info-list"
                            }
                          },
                          "required": ["authenticators"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "authenticators": [
                                {
                                  "id": "pau_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
                                  "type": "password",
                                  "enabled": true,
                                  "phase": "primary",
                                  "enrolling_ip": "192.168.1.1",
                                  "enrolling_browser": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:123.0) Gecko/20100101 Firefox/123.0",
                                  "created_at": "2022-11-21T21:21:40.258033Z",
                                  "updated_at": "2022-11-21T21:21:40.258033Z"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/create": {
      "post": {
        "operationId": "authn_post_v2_user_create",
        "summary": "Create user",
        "description": "Create a user.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  },
                  "profile": {
                    "$ref": "#/components/schemas/authn-user-profile"
                  }
                },
                "$comment": "require provider and possibly other fields as well",
                "required": ["email", "profile"],
                "optional": ["username"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com",
                    "profile": {
                      "first_name": "Joe",
                      "last_name": "User"
                    }
                  },
                  {
                    "username": "johnnyd337",
                    "email": "john.doe@email.com",
                    "profile": {
                      "first_name": "John",
                      "last_name": "Doe"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-v2-user-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/delete": {
      "post": {
        "operationId": "authn_post_v2_user_delete",
        "summary": "Delete user",
        "description": "Delete a user.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  }
                },
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/list": {
      "post": {
        "operationId": "authn_post_v2_user_list",
        "summary": "List users",
        "description": "Look up users by scopes.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-users",
                "type": "object",
                "properties": {},
                "unevaluatedProperties": false,
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed users",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "users": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/authn-v2-user-info"
                              }
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["users", "count"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "users": [
                                {
                                  "id": "pui_ypkhwpnz2cmegsws737xbsqnmnuwtbm9",
                                  "username": "someuser1234",
                                  "email": "joe.user@email.com",
                                  "profile": {
                                    "first_name": "Joe",
                                    "last_name": "User",
                                    "image_url": "https://avatars.githubusercontent.com/u/19916453?v=4"
                                  },
                                  "verified": false,
                                  "disabled": false,
                                  "last_login_at": "2022-11-21T21:21:40.256969Z"
                                }
                              ],
                              "count": 1
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/password/expire": {
      "post": {
        "operationId": "authn_post_v2_user_password_expire",
        "summary": "Expire user password",
        "description": "The next time the user logs in they must set a new password.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  }
                },
                "required": ["id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "id": "pui_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user password expiry has been set successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/profile/get": {
      "post": {
        "operationId": "authn_post_v2_user_profile_get",
        "summary": "Get user",
        "description": "Get user's information by identity or email.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  }
                },
                "required": [],
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-v2-user-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/profile/update": {
      "post": {
        "operationId": "authn_post_v2_user_profile_update",
        "summary": "Update user",
        "description": "Update user's information by identity or email.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  },
                  "profile": {
                    "$ref": "#/components/schemas/authn-user-profile-edits"
                  }
                },
                "required": ["profile"],
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com",
                    "profile": {
                      "phone": "+18085550173",
                      "deleteme": "XXX null should be supported here"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's update information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-v2-user-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/update": {
      "post": {
        "operationId": "authn_post_v2_user_update",
        "summary": "Update user settings",
        "description": "Update user's settings.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-identity"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "username": {
                    "$ref": "#/components/schemas/authn-username"
                  },
                  "disabled": {
                    "type": ["boolean"],
                    "description": "New disabled value. Disabling a user account will prevent them from logging in."
                  },
                  "unlock": {
                    "type": ["boolean"],
                    "description": "Unlock a user account if it has been locked out due to failed Authentication attempts."
                  }
                },
                "required": [],
                "exactlyOne": ["username", "email", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "email": "joe.user@email.com",
                    "disabled": false
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's updated information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-v2-user-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/invite": {
      "post": {
        "operationId": "authn_post_v2_user_invite",
        "summary": "Invite user",
        "description": "Send an invitation to a user.",
        "tags": ["authn", "v2-invites"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inviter": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "email": {
                    "$ref": "#/components/schemas/authn-email"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/authn-callback"
                  },
                  "state": {
                    "$ref": "#/components/schemas/authn-callback-state"
                  },
                  "client_id": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/authn-serviceaccount-id"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": ["inviter", "email", "callback", "state"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An invitation was sent",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-invite-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/invite/delete": {
      "post": {
        "operationId": "authn_post_v2_user_invite_delete",
        "summary": "Delete invite",
        "description": "Delete a user invitation.",
        "tags": ["authn", "v2-invites"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-ticket-id"
                  }
                },
                "required": ["id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user invite was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/invite/list": {
      "post": {
        "operationId": "authn_post_v2_user_invite_list",
        "summary": "List active invites",
        "description": "Look up active invites for the userpool.",
        "tags": ["authn", "v2-invites"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-tickets",
                "unevaluatedProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed invites",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "invites": {
                              "$ref": "#/components/schemas/authn-invite-infos"
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["invites", "count"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "invites": [
                                {
                                  "id": "pmi_vjb237phymwzzlulrtxegapha5lqevxy",
                                  "inviter": "joe.user@email.com",
                                  "invite_org": "",
                                  "email": "bob.user@email.com",
                                  "callback": "https://www.myserver.com/callback",
                                  "state": "C8VTNjY2icUMeiDHFHUxBwiAstEGqaayU4",
                                  "require_mfa": false,
                                  "created_at": "2022-11-22T22:26:56.860720Z",
                                  "expire": "2022-11-24T22:26:56.859258Z"
                                }
                              ],
                              "count": 1
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/jwks": {
      "post": {
        "operationId": "authn_post_v2_client_jwks",
        "summary": "Get JWKS",
        "description": "Get JWT verification keys.",
        "tags": ["authn", "v2-jwt"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false,
                "examples": [{}]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT verification keys",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "keys": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          },
                          "examples": [
                            {
                              "keys": [
                                {
                                  "kid": "pvi_r7zwvsjdbn4gzfs4omcymufduaj2g7tk|1",
                                  "kty": "EC",
                                  "alg": "ES256",
                                  "crv": "P-256",
                                  "x": "STtbGUps_zg68LClcx94RpTB0-vdCkUaCCq_g_GDWvI",
                                  "y": "NS9HhE7h4kaqRQVnodA2e4VZoANN-3eotLTXBdYidZ0"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/agreements/create": {
      "post": {
        "operationId": "authn_post_v2_agreements_create",
        "summary": "Create agreement",
        "description": "Create an agreement.",
        "tags": ["authn", "v2-agreements-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/authn-agreement-type"
                  },
                  "name": {
                    "type": "string",
                    "description": "A name to describe the agreement."
                  },
                  "text": {
                    "type": "string",
                    "description": "The body of the agreement."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "A flag to that marks which of the agreements is currently active."
                  }
                },
                "required": ["type", "name", "text"],
                "additionalProperties": false,
                "examples": [
                  {
                    "type": "eula",
                    "name": "EULA_V1",
                    "text": "You agree to behave yourself while logged in."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created agreement",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-agreement-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/agreements/delete": {
      "post": {
        "operationId": "authn_post_v2_agreements_delete",
        "summary": "Delete agreement",
        "description": "Delete an agreement.",
        "tags": ["authn", "v2-agreements-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/authn-agreement-type"
                  },
                  "id": {
                    "$ref": "#/components/schemas/authn-agreement-id"
                  }
                },
                "required": ["type", "id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The agreement was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/agreements/list": {
      "post": {
        "operationId": "authn_post_v2_agreements_list",
        "summary": "List agreements",
        "description": "List agreements.",
        "tags": ["authn", "v2-agreements-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-agreements",
                "unevaluatedProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed agreements",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "agreements": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/authn-agreement-info"
                              }
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["agreements", "count"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "agreements": [
                                {
                                  "type": "eula",
                                  "id": "peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
                                  "created_at": "2022-11-22T22:26:56.860720Z",
                                  "updated_at": "2022-11-22T22:26:56.860720Z",
                                  "name": "EULA_V1",
                                  "text": "You agree to behave yourself while logged in.",
                                  "active": true
                                }
                              ],
                              "count": 1
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/agreements/update": {
      "post": {
        "operationId": "authn_post_v2_agreements_update",
        "summary": "Update agreement",
        "description": "Update an agreement.",
        "tags": ["authn", "v2-agreements-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/authn-agreement-type"
                  },
                  "id": {
                    "$ref": "#/components/schemas/authn-agreement-id"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the agreement."
                  },
                  "text": {
                    "type": "string",
                    "description": "The body of the agreement."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "A flag to that marks which of the agreements is currently active."
                  }
                },
                "required": ["type", "id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "type": "eula",
                    "id": "peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
                    "active": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated agreement's information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-agreement-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/users/import": {
      "post": {
        "operationId": "authn_post_v2_users_import",
        "summary": "Import user",
        "description": "One time user import from a given source.",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-import-endpoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Completed imported users operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/user-import-result-summary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/users/sources/upload": {
      "post": {
        "operationId": "authn_post_v2_users_sources_upload",
        "summary": "Import users from file",
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "$defs": {},
                "required": ["request", "upload"],
                "type": "object",
                "properties": {
                  "request": {
                    "type": "object",
                    "properties": {
                      "transfer_method": {
                        "description": "The transfer method used to upload the file data.",
                        "type": "string",
                        "enum": ["multipart"],
                        "default": "multipart"
                      },
                      "file_type": {
                        "description": "file type",
                        "type": "string",
                        "enum": ["csv"],
                        "default": "csv"
                      }
                    },
                    "additionalProperties": false,
                    "required": ["transfer_method", "file_type"]
                  },
                  "upload": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The object was successfully stored.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "object": {
                              "description": "The object that was created.",
                              "$ref": "#/components/schemas/user-import-source-upload"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-user-management"]
      }
    },
    "/v2/users/import/get": {
      "post": {
        "operationId": "authn_post_v2_users_import_get",
        "summary": "Get import details",
        "description": "Get user import details",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/user-import-id"
                  },
                  "verbose_failed": {
                    "type": "boolean",
                    "description": "Enable this option to retrieve detailed information about users whose import have failed. When set to true, the system will include comprehensive error details, such as the nature of the failure and the specific user data associated with the failure. This can be useful for debugging and auditing purposes."
                  },
                  "verbose_skipped": {
                    "type": "boolean",
                    "description": "Enable this option to retrieve detailed information about users whose import have skipped. When set to true, the system will include comprehensive error details, such as the nature of the failure and the specific user data associated with the failure. This can be useful for debugging and auditing purposes."
                  },
                  "verbose_success": {
                    "type": "boolean",
                    "description": "Enable this option to retrieve detailed information about users whose import have success. When set to true, the system will include comprehensive error details, such as the nature of the failure and the specific user data associated with the failure. This can be useful for debugging and auditing purposes."
                  }
                },
                "required": ["id"],
                "additionalProperties": false,
                "examples": [
                  {
                    "id": "pum_22gu57qn3vq3lsmdszopghgd4xijw2ye",
                    "verbose_failed": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Completed imported users operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/user-import-result-summary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/users/import/list": {
      "post": {
        "operationId": "authn_post_v2_users_import_list",
        "summary": "List imports",
        "description": "Lookup active or past user import data",
        "tags": ["authn", "v2-user-management"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-user-import"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Completed imported users operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "user_imports": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/user-import-result-summary"
                              }
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["user_imports", "count"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/users/import/validate": {
      "post": {
        "operationId": "authn_post_v2_users_import_validate",
        "summary": "Validating importing user parameter",
        "description": "Validating importing user parameter.",
        "tags": ["authn"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-import-endpoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Completed user import validation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/user-import-result-summary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/group/create": {
      "post": {
        "operationId": "authn_post_v2_group_create",
        "summary": "Create user group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/authn-group-name"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/authn-group-attributes"
                  }
                },
                "required": ["name", "type"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-group-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/group/delete": {
      "post": {
        "operationId": "authn_post_v2_group_delete",
        "summary": "Delete user group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-group-id"
                  }
                },
                "required": ["id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            },
            "description": "No description provided"
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/group/get": {
      "post": {
        "operationId": "authn_post_v2_group_get",
        "summary": "Get user group",
        "description": "Look up a group by ID and return its information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-group-id"
                  }
                },
                "required": ["id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-group-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/group/list": {
      "post": {
        "operationId": "authn_post_v2_group_list",
        "summary": "List user groups",
        "description": "Look up groups by name, type, or attributes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-filter-groups",
                "type": "object",
                "unevaluatedProperties": false,
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed groups",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "description": "List of matching groups",
                              "$ref": "#/components/schemas/authn-group-list"
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["groups", "count"],
                          "additionalProperties": false,
                          "examples": [
                            {
                              "groups": [
                                {
                                  "id": "pgi_mhotohiowr2zubwxofp2vdxiojahzqpg",
                                  "name": "Console Users",
                                  "description": "Users with access to Console",
                                  "type": "system",
                                  "attributes": {
                                    "key": "value-pairs",
                                    "another": "value"
                                  },
                                  "created_at": "2022-11-22T01:28:30.824144Z",
                                  "updated_at": "2022-11-22T01:28:30.824144Z"
                                }
                              ],
                              "count": 1
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/group/user/list": {
      "post": {
        "operationId": "authn_post_v2_group_user_list",
        "summary": "List users assigned to a group",
        "description": "Return a list of ids for users assigned to a group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-paginate",
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-group-id"
                  }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed user ids",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "users": {
                              "$ref": "#/components/schemas/authn-group-user-list"
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["user_ids", "count"],
                          "additionalProperties": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/group/update": {
      "post": {
        "operationId": "authn_post_v2_group_update",
        "summary": "Update user group details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-group-id"
                  },
                  "name": {
                    "$ref": "#/components/schemas/authn-group-name"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/authn-group-attributes"
                  }
                },
                "required": ["id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-group-info"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-groups"]
      }
    },
    "/v2/user/group/assign": {
      "post": {
        "operationId": "authn_post_v2_user_group_assign",
        "summary": "Assign user to groups",
        "description": "Add a list of groups to a specified user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-user-id"
                  },
                  "group_ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/authn-group-id"
                    },
                    "minItems": 1,
                    "maxItems": 32,
                    "uniqueItems": true
                  }
                },
                "required": ["id", "group_ids"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-user-management"]
      }
    },
    "/v2/user/group/remove": {
      "post": {
        "operationId": "authn_post_v2_user_group_remove",
        "summary": "Unassign user group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-user-id"
                  },
                  "group_id": {
                    "$ref": "#/components/schemas/authn-group-id"
                  }
                },
                "required": ["id", "group_id"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/authn-empty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-user-management"]
      }
    },
    "/v2/user/group/list": {
      "post": {
        "operationId": "authn_post_v2_user_group_list",
        "summary": "List groups for user",
        "description": "Return a list of ids for groups assigned to a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authn-paginate",
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/authn-user-id"
                  }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listed user groups",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "description": "List of matching groups",
                              "$ref": "#/components/schemas/authn-group-list"
                            },
                            "count": {
                              "type": "integer"
                            },
                            "last": {
                              "type": "string"
                            }
                          },
                          "required": ["group_ids", "count"],
                          "additionalProperties": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["authn", "v2-user-management"]
      }
    },
    "/request/{requestId}": {
      "get": {
        "operationId": "get_async_request",
        "summary": "Get an asynchronous request",
        "description": "Will retrieve the result, or will return 202 if the original request is still in progress",
        "tags": ["authn"],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The request ID to poll",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Asynchronous request in progress",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "ttl_mins": {
                              "type": "integer"
                            },
                            "retry_counter": {
                              "type": "integer"
                            },
                            "location": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pangea-response"
                }
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.1.0",
  "components": {
    "schemas": {
      "pangea-response": {
        "title": "Response Schema",
        "description": "Pangea standard response schema",
        "type": "object",
        "required": ["request_id", "request_time", "response_time", "status"],
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A unique identifier assigned to each request made to the API. It is used to track and identify a specific request and its associated data. The `request_id` can be helpful for troubleshooting, auditing, and tracing the flow of requests within the system. It allows users to reference and retrieve information related to a particular request, such as the response, parameters, and raw data associated with that specific request.\n\n```\n\"request_id\":\"prq_x6fdiizbon6j3bsdvnpmwxsz2aan7fqd\"\n```"
          },
          "request_time": {
            "type": "string",
            "description": "The timestamp indicates the exact moment when a request is made to the API. It represents the date and time at which the request was initiated by the client. The `request_time` is useful for tracking and analyzing the timing of requests, measuring response times, and monitoring performance metrics. It allows users to determine the duration between the request initiation and the corresponding response, aiding in the assessment of API performance and latency.\n\n```\n\"request_time\":\"2022-09-21T17:24:33.105Z\"\n```"
          },
          "response_time": {
            "type": "string",
            "description": "Duration it takes for the API to process a request and generate a response. It represents the elapsed time from when the request is received by the API to when the corresponding response is returned to the client.\n\n```\n\"response_time\":\"2022-09-21T17:24:34.007Z\"\n```"
          },
          "status": {
            "type": "string",
            "enum": ["Success"],
            "description": "It represents the status or outcome of the API request made for IP information. It indicates the current state or condition of the request and provides information on the success or failure of the request.\n\n```\n\"status\":\"success\"\n```"
          },
          "summary": {
            "type": "string",
            "description": "Provides a concise and brief overview of the purpose or primary objective of the API endpoint. It serves as a high-level summary or description of the functionality or feature offered by the endpoint."
          },
          "result": {
            "type": "object"
          }
        },
        "examples": [
          {
            "request_id": "prq_x6fdiizbon6j3bsdvnpmwxsz2aan7fqd",
            "request_time": "2022-09-21T17:24:33.105Z",
            "response_time": "2022-09-21T17:24:34.007Z",
            "status": "success"
          }
        ]
      },
      "pangea-validation-errors": {
        "$ref": "#/components/schemas/pangea-response",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "object",
            "required": ["errors"],
            "properties": {
              "errors": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": ["code", "detail", "source"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "FieldRequired",
                        "InvalidString",
                        "InvalidNumber",
                        "InvalidInteger",
                        "InvalidObject",
                        "InvalidArray",
                        "InvalidNull",
                        "InvalidBool",
                        "BadFormat",
                        "BadFormatPangeaDuration",
                        "BadFormatDateTime",
                        "BadFormatTime",
                        "BadFormatDate",
                        "BadFormatEmail",
                        "BadFormatHostname",
                        "BadFormatIPv4",
                        "BadFormatIPv6",
                        "BadFormatIPAddress",
                        "BadFormatUUID",
                        "BadFormatURI",
                        "BadFormatURIReference",
                        "BadFormatIRI",
                        "BadFormatIRIReference",
                        "BadFormatJSONPointer",
                        "BadFormatRelativeJSONPointer",
                        "BadFormatRegex",
                        "BadFormatJSONPath",
                        "BadFormatBase64",
                        "DoesNotMatchPattern",
                        "DoesNotMatchPatternProperties",
                        "NotEnumMember",
                        "AboveMaxLength",
                        "BelowMinLength",
                        "AboveMaxItems",
                        "BelowMinItems",
                        "NotMultipleOf",
                        "NotWithinRange",
                        "UnexpectedProperty",
                        "InvalidPropertyName",
                        "AboveMaxProperties",
                        "BelowMinProperties",
                        "NotContains",
                        "ContainsTooMany",
                        "ContainsTooFew",
                        "ItemNotUnique",
                        "UnexpectedAdditionalItem",
                        "InvalidConst",
                        "IsDependentOn",
                        "IsTooBig",
                        "IsTooSmall",
                        "ShouldNotBeValid",
                        "NoUnevaluatedItems",
                        "NoUnevaluatedProperties",
                        "DoesNotExist",
                        "IsReadOnly",
                        "CannotAddToDefault",
                        "MustProvideOne",
                        "MutuallyExclusive",
                        "BadState",
                        "InaccessibleURI",
                        "ProviderDisabled",
                        "ConfigProjectMismatch",
                        "ConfigServiceMismatch",
                        "ConfigNotExist"
                      ]
                    },
                    "detail": {
                      "type": "string",
                      "description": "Human readable description of the error"
                    },
                    "source": {
                      "type": "string",
                      "description": "Path to the data source of the error",
                      "format": "json-pointer"
                    },
                    "path": {
                      "type": "string",
                      "description": "The Schema path where the error ocurred",
                      "format": "json-pointer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "authn-branding-resource": {
        "type": "object",
        "description": "Login page branding configuration",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "brand_name": {
            "type": "string"
          },
          "brand_logo": {
            "type": "string"
          },
          "brand_page_logo": {
            "type": "string"
          },
          "brand_logo_height": {
            "type": "string"
          },
          "brand_favicon": {
            "type": "string"
          },
          "brand_url": {
            "type": "string"
          },
          "support_email": {
            "type": "string"
          },
          "font_family": {
            "type": "string"
          },
          "density": {
            "type": "string"
          },
          "bg_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "bg_image": {
            "type": "string"
          },
          "primary_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "secondary_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "text_primary_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "text_secondary_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "text_contrast_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "link_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "link_style": {
            "type": "string"
          },
          "header_font_size": {
            "type": "string"
          },
          "header_font_weight": {
            "type": "string"
          },
          "body_font_size": {
            "type": "string"
          },
          "body_font_weight": {
            "type": "string"
          },
          "input_bg_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "input_text_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "input_border_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "input_border_radius": {
            "type": "string"
          },
          "button_variant": {
            "type": "string"
          },
          "button_border_radius": {
            "type": "string"
          },
          "panel_bg_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "panel_border_color": {
            "$ref": "#/components/schemas/authn-css"
          },
          "panel_border_radius": {
            "type": "string"
          },
          "panel_box_shadow": {
            "$ref": "#/components/schemas/authn-css"
          },
          "authn_show_name": {
            "type": "string"
          },
          "authn_submit_label": {
            "type": "string"
          },
          "authn_cancel_label": {
            "type": "string"
          },
          "start_heading": {
            "type": "string"
          },
          "start_button_label": {
            "type": "string"
          },
          "password_heading": {
            "type": "string"
          },
          "password_button_label": {
            "type": "string"
          },
          "signup_heading": {
            "type": "string"
          },
          "signup_button_label": {
            "type": "string"
          },
          "social_heading": {
            "type": "string"
          },
          "authn_show_social_icons": {
            "type": "boolean"
          },
          "social_icon_style": {
            "type": "string"
          },
          "otp_font_size": {
            "type": "string"
          },
          "otp_button_label": {
            "type": "string"
          },
          "captcha_heading": {
            "type": "string"
          },
          "eula_heading": {
            "type": "string"
          },
          "privacy_heading": {
            "type": "string"
          },
          "custom": {
            "type": "string"
          },
          "custom_metadata": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": ["object"]
              }
            }
          }
        },
        "required": [],
        "additionalProperties": true
      },
      "authn-branding-resource-result": {
        "required": [
          "id",
          "brand_name",
          "brand_logo",
          "brand_page_logo",
          "brand_logo_height",
          "brand_favicon",
          "brand_url",
          "support_email",
          "font_family",
          "density",
          "bg_color",
          "bg_image",
          "primary_color",
          "secondary_color",
          "text_primary_color",
          "text_secondary_color",
          "text_contrast_color",
          "link_color",
          "link_style",
          "header_font_size",
          "header_font_weight",
          "body_font_size",
          "body_font_weight",
          "input_bg_color",
          "input_border_color",
          "input_border_radius",
          "button_variant",
          "button_border_radius",
          "panel_bg_color",
          "panel_border_radius",
          "panel_box_shadow",
          "authn_show_name",
          "start_heading",
          "start_button_label",
          "password_heading",
          "password_button_label",
          "signup_heading",
          "signup_button_label",
          "social_heading",
          "social_icon_style",
          "authn_show_social_icons",
          "otp_font_size",
          "otp_button_label",
          "captcha_heading",
          "eula_heading",
          "privacy_heading"
        ],
        "$ref": "#/components/schemas/authn-branding-resource"
      },
      "authn-callback": {
        "type": "string",
        "description": "A login callback URI",
        "format": "http-url",
        "examples": ["https://www.myserver.com/callback"]
      },
      "authn-callback-code": {
        "type": "string",
        "description": "A social oauth callback code",
        "pattern": "^[a-zA-Z0-9_-]{8,64}$",
        "examples": ["poc_fwg3ul4db1jpivexru3wyj354u9ej5e2"]
      },
      "authn-callback-state": {
        "type": "string",
        "description": "State tracking string for login callbacks",
        "pattern": "^[a-zA-Z0-9_\\-\\+\\/=.]{8,999}$",
        "examples": ["pcb_zurr3lkcwdp5keq73htsfpcii5k4zgm7"]
      },
      "authn-css": {
        "type": "string",
        "$comment": "XXX TODO: better validation, perhaps a built-in using golang's CSS parser",
        "description": "CSS style string",
        "examples": ["24px"]
      },
      "authn-duration-golang": {
        "type": "string",
        "$comment": "XXX TODO: better validation, perhaps a built-in using golang's Duration parser",
        "description": "A positive time duration",
        "examples": ["5h30m"]
      },
      "authn-duration-seconds": {
        "type": "integer",
        "description": "A positive time duration in seconds",
        "minimum": 1,
        "exclusiveMinimum": 0,
        "examples": [86400]
      },
      "authn-duration-seconds-nullable": {
        "type": ["integer", "null"],
        "description": "A positive time duration in seconds or null"
      },
      "authn-username": {
        "type": "string",
        "$comment": "Allowed format enforced by the backend based on configuration.",
        "description": "A username string, which can be used in place of an `id` or `email` in many cases.",
        "pattern": "^[0-9a-zA-Z+._+@-]{2,320}$",
        "examples": ["someuser1234", "+1-808-555-0173", "john.doe@email.com"]
      },
      "authn-email": {
        "type": "string",
        "description": "An email address; if not populated, certain calls may return a 'need_email' in the response.",
        "$comment": "XXX TODO: come up with a better validation for email formats",
        "pattern": "^[0-9a-zA-Z+._-]+@[0-9a-zA-Z.-]+$",
        "examples": ["joe.user@email.com"]
      },
      "authn-email-nullable": {
        "description": "An email address or empty",
        "oneOf": [
          {
            "$ref": "#/components/schemas/authn-email"
          },
          {
            "type": "null"
          }
        ]
      },
      "authn-empty": {
        "type": "object",
        "description": "An empty object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "examples": [{}]
      },
      "authn-empty-string": {
        "type": "string",
        "maxLength": 0
      },
      "authn-agreement-info": {
        "type": "object",
        "description": "A EULA",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/authn-agreement-type"
          },
          "id": {
            "$ref": "#/components/schemas/authn-agreement-id"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "published_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "name": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "id",
          "created_at",
          "updated_at",
          "name",
          "text",
          "active"
        ],
        "additionalProperties": false,
        "examples": [
          {
            "type": "eula",
            "id": "peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "created_at": "2022-11-22T22:26:56.860720Z",
            "updated_at": "2022-11-22T22:26:56.860720Z",
            "name": "EULA_V1",
            "text": "You agree to behave yourself while logged in.",
            "active": true
          }
        ]
      },
      "authn-authenticator-id": {
        "type": "string",
        "description": "An ID for an authenticator",
        "pattern": "^pau_[a-z2-7]{32}$",
        "examples": ["pau_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-agreement-id": {
        "type": "string",
        "description": "An ID for an agreement",
        "pattern": "^peu_[a-z2-7]{32}$",
        "examples": ["peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-agreement-type": {
        "type": "string",
        "description": "An agreement type",
        "enum": ["eula", "privacy_policy"],
        "examples": ["eula"]
      },
      "authn-filter-agreements": {
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "active": {
                "description": "Only records where active equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "published_at": {
                "description": "Only records where published_at equals this value.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "published_at__gt": {
                "description": "Only records where published_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "published_at__gte": {
                "description": "Only records where published_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "published_at__lt": {
                "description": "Only records where published_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "published_at__lte": {
                "description": "Only records where published_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "text": {
                "description": "Only records where text equals this value.",
                "nullable": false,
                "type": "string"
              },
              "text__contains": {
                "description": "Only records where text includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "text__in": {
                "description": "Only records where text equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "description": "Only records where type equals this value.",
                "nullable": false,
                "type": "string"
              },
              "type__contains": {
                "description": "Only records where type includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "type__in": {
                "description": "Only records where type equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "type",
              "created_at",
              "updated_at",
              "published_at",
              "name",
              "text"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-filter-tickets": {
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "callback": {
                "description": "Only records where callback equals this value.",
                "nullable": false,
                "type": "string"
              },
              "callback__contains": {
                "description": "Only records where callback includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "callback__in": {
                "description": "Only records where callback equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "email": {
                "description": "Only records where email equals this value.",
                "nullable": false,
                "type": "string"
              },
              "email__contains": {
                "description": "Only records where email includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "email__in": {
                "description": "Only records where email equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "expire": {
                "description": "Only records where expire equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "expire__gt": {
                "description": "Only records where expire is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__gte": {
                "description": "Only records where expire is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__lt": {
                "description": "Only records where expire is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__lte": {
                "description": "Only records where expire is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "invite_org": {
                "description": "Only records where invite_org equals this value.",
                "nullable": false,
                "type": "string"
              },
              "invite_org__contains": {
                "description": "Only records where invite_org includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "invite_org__in": {
                "description": "Only records where invite_org equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "inviter": {
                "description": "Only records where inviter equals this value.",
                "nullable": false,
                "type": "string"
              },
              "inviter__contains": {
                "description": "Only records where inviter includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "inviter__in": {
                "description": "Only records where inviter equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "is_signup": {
                "description": "Only records where is_signup equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "require_mfa": {
                "description": "Only records where require_mfa equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "state": {
                "description": "Only records where state equals this value.",
                "nullable": false,
                "type": "string"
              },
              "state__contains": {
                "description": "Only records where state includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "state__in": {
                "description": "Only records where state equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "type",
              "expire",
              "callback",
              "state",
              "email",
              "inviter",
              "invite_org"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-filter-tokens": {
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {
              "^profile_([A-Za-z]+)$": {
                "description": "Only records where metadata field equals this value.",
                "type": "string"
              },
              "^profile_([A-Za-z]+)__contains$": {
                "description": "Only records where metadata field contains one of these substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "^profile_([A-Za-z]+)__exists$": {
                "description": "Only records where metadata field exists (true) or doesn't (false).",
                "type": "boolean"
              }
            },
            "properties": {
              "active_token_id": {
                "description": "Only records where active_token_id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "active_token_id__contains": {
                "description": "Only records where active_token_id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "active_token_id__in": {
                "description": "Only records where active_token_id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "email": {
                "description": "Only records where email equals this value.",
                "nullable": false,
                "type": "string"
              },
              "email__contains": {
                "description": "Only records where email includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "email__in": {
                "description": "Only records where email equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "username": {
                "description": "Only records where username equals this value.",
                "nullable": false,
                "type": "string"
              },
              "username__contains": {
                "description": "Only records where username includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "username__in": {
                "description": "Only records where username equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "enabled": {
                "description": "Only records where enabled equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "expire": {
                "description": "Only records where expire equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "expire__gt": {
                "description": "Only records where expire is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__gte": {
                "description": "Only records where expire is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__lt": {
                "description": "Only records where expire is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "expire__lte": {
                "description": "Only records where expire is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "identity": {
                "description": "Only records where identity equals this value.",
                "nullable": false,
                "type": "string"
              },
              "identity__contains": {
                "description": "Only records where identity includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "identity__in": {
                "description": "Only records where identity equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "scopes": {
                "description": "A list of tags that all must be present.",
                "items": {
                  "description": "Tags.",
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "description": "Only records where type equals this value.",
                "nullable": false,
                "type": "string"
              },
              "type__contains": {
                "description": "Only records where type includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "type__in": {
                "description": "Only records where type equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "type",
              "identity",
              "email",
              "expire",
              "active_token_id"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-filter-users": {
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {
              "^profile_([A-Za-z]+)$": {
                "description": "Only records where metadata field equals this value.",
                "type": "string"
              },
              "^profile_([A-Za-z]+)__contains$": {
                "description": "Only records where metadata field contains one of these substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "^profile_([A-Za-z]+)__exists$": {
                "description": "Only records where metadata field exists (true) or doesn't (false).",
                "type": "boolean"
              }
            },
            "properties": {
              "accepted_eula_id": {
                "description": "Only records where accepted_eula_id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "accepted_eula_id__contains": {
                "description": "Only records where accepted_eula_id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "accepted_eula_id__in": {
                "description": "Only records where accepted_eula_id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "accepted_privacy_policy_id": {
                "description": "Only records where accepted_privacy_policy_id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "accepted_privacy_policy_id__contains": {
                "description": "Only records where accepted_privacy_policy_id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "accepted_privacy_policy_id__in": {
                "description": "Only records where accepted_privacy_policy_id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "disabled": {
                "description": "Only records where disabled equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "email": {
                "description": "Only records where email equals this value.",
                "nullable": false,
                "type": "string"
              },
              "email__contains": {
                "description": "Only records where email includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "email__in": {
                "description": "Only records where email equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "username": {
                "description": "Only records where username equals this value.",
                "nullable": false,
                "type": "string"
              },
              "username__contains": {
                "description": "Only records where username includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "username__in": {
                "description": "Only records where username equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "last_login_at": {
                "description": "Only records where last_login_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "last_login_at__gt": {
                "description": "Only records where last_login_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "last_login_at__gte": {
                "description": "Only records where last_login_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "last_login_at__lt": {
                "description": "Only records where last_login_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "last_login_at__lte": {
                "description": "Only records where last_login_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "last_login_ip": {
                "description": "Only records where last_login_ip equals this value.",
                "nullable": false,
                "type": "string"
              },
              "last_login_ip__contains": {
                "description": "Only records where last_login_ip includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "last_login_ip__in": {
                "description": "Only records where last_login_ip equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "login_count": {
                "description": "Only records where login_count equals this value.",
                "nullable": false,
                "type": "integer"
              },
              "login_count__gt": {
                "description": "Only records where login_count is greater than this value.",
                "type": "integer"
              },
              "login_count__gte": {
                "description": "Only records where login_count is greater than or equal to this value.",
                "type": "integer"
              },
              "login_count__lt": {
                "description": "Only records where login_count is less than to this value.",
                "type": "integer"
              },
              "login_count__lte": {
                "description": "Only records where login_count is less than or equal to this value.",
                "type": "integer"
              },
              "require_mfa": {
                "description": "Only records where require_mfa equals this value.",
                "nullable": false,
                "type": "boolean"
              },
              "scopes": {
                "description": "A list of tags that all must be present.",
                "items": {
                  "description": "Tags.",
                  "type": "string"
                },
                "type": "array"
              },
              "verified": {
                "description": "Only records where verified equals this value.",
                "nullable": false,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "last_login_at",
              "last_login_ip",
              "login_count",
              "email",
              "accepted_eula_id",
              "accepted_privacy_policy_id"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-flow-choice": {
        "type": "string",
        "$comment": "XXX TODO: make enum of available choices"
      },
      "authn-flow-id": {
        "type": "string",
        "description": "An ID for a login or signup flow",
        "pattern": "^pfl_[a-z2-7]{32}$",
        "examples": ["pfl_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-flow-next-step": {
        "type": "string",
        "enum": [
          "start",
          "verify/captcha",
          "signup",
          "verify/email",
          "verify/password",
          "verify/password_reset",
          "verify/social",
          "enroll/mfa/start",
          "enroll/mfa/complete",
          "verify/mfa/start",
          "verify/mfa/complete",
          "reset/password",
          "complete"
        ]
      },
      "authn-social-provider-info": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/authn-provider-id"
          },
          "redirect_uri": {
            "type": "string",
            "format": "http-url"
          }
        },
        "required": ["provider", "redirect_uri"]
      },
      "authn-flow-next": {
        "type": "object",
        "description": "Information about next steps needed to complete a flow",
        "properties": {
          "error": {
            "type": "string"
          },
          "next_step": {
            "$ref": "#/components/schemas/authn-flow-next-step"
          },
          "complete": {
            "$ref": "#/components/schemas/authn-empty"
          },
          "enroll_mfa_start": {
            "type": "object",
            "properties": {
              "mfa_providers": {
                "$ref": "#/components/schemas/authn-mfa-providers"
              }
            },
            "required": ["mfa_providers"]
          },
          "enroll_mfa_complete": {
            "type": "object",
            "properties": {
              "totp_secret": {
                "$ref": "#/components/schemas/authn-mfa-totp-secret"
              }
            },
            "required": []
          },
          "signup": {
            "type": "object",
            "properties": {
              "social_signup": {
                "type": "object",
                "properties": {
                  "providers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/authn-social-provider-info"
                    }
                  }
                },
                "required": ["providers"]
              },
              "password_signup": {
                "$ref": "#/components/schemas/authn-password-policy"
              }
            },
            "required": []
          },
          "verify_captcha": {
            "type": "object",
            "properties": {
              "site_key": {
                "type": "string"
              }
            },
            "required": ["site_key"]
          },
          "verify_email": {
            "$ref": "#/components/schemas/authn-empty"
          },
          "verify_mfa_start": {
            "type": "object",
            "properties": {
              "mfa_providers": {
                "$ref": "#/components/schemas/authn-mfa-providers"
              }
            },
            "required": ["mfa_providers"]
          },
          "verify_mfa_complete": {
            "$ref": "#/components/schemas/authn-empty"
          },
          "reset_password": {
            "$ref": "#/components/schemas/authn-password-policy"
          },
          "verify_password_reset": {
            "$ref": "#/components/schemas/authn-empty"
          },
          "verify_password": {
            "$ref": "#/components/schemas/authn-password-policy"
          },
          "verify_social": {
            "$ref": "#/components/schemas/authn-social-provider-info"
          }
        },
        "required": ["next_step"],
        "exactlyOne": [
          "complete",
          "enroll_mfa_start",
          "enroll_mfa_complete",
          "signup",
          "verify_captcha",
          "verify_email",
          "verify_mfa_start",
          "verify_mfa_complete",
          "verify_password",
          "verify_social"
        ]
      },
      "authn-flow-type": {
        "type": "string",
        "description": "A flow type",
        "enum": ["signup", "signin"],
        "examples": ["signin"]
      },
      "authn-flow-types": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-flow-type"
        },
        "description": "A list of flow types",
        "examples": [["signup", "signin"]]
      },
      "authn-identity": {
        "type": "string",
        "description": "The identity of a user or a service",
        "pattern": "^[a-zA-Z0-9 '.:/_-]+$",
        "examples": ["pui_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-identity-nullable": {
        "description": "The identity of a user or a service or empty",
        "oneOf": [
          {
            "$ref": "#/components/schemas/authn-identity"
          },
          {
            "type": "null"
          }
        ]
      },
      "authn-identity-user": {
        "type": "string",
        "description": "The identity of a user",
        "pattern": "^pui_[a-z2-7]{32}$",
        "examples": ["pui_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-password": {
        "type": "string",
        "description": "A password"
      },
      "authn-password-policy": {
        "type": "object",
        "properties": {
          "password_chars_min": {
            "type": "integer"
          },
          "password_chars_max": {
            "type": "integer"
          },
          "password_lower_min": {
            "type": "integer"
          },
          "password_upper_min": {
            "type": "integer"
          },
          "password_punct_min": {
            "type": "integer"
          },
          "password_number_min": {
            "type": "integer"
          }
        },
        "required": [
          "password_chars_min",
          "password_lower_min",
          "password_upper_min",
          "password_punct_min"
        ]
      },
      "authn-auth-type": {
        "type": "string",
        "description": "An authentication mechanism",
        "enum": [
          "email_otp",
          "magiclink",
          "password",
          "passkey",
          "sms_otp",
          "social",
          "saml",
          "totp"
        ],
        "examples": ["password"]
      },
      "authn-auth-types": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-auth-type"
        },
        "description": "A list of authentication types",
        "examples": ["email_otp", "password"]
      },
      "authn-provider-id": {
        "type": "string",
        "description": "Mechanism for authenticating a user's identity",
        "enum": [
          "password",
          "google",
          "github",
          "facebook",
          "gitlab",
          "linkedin",
          "microsoftonline",
          "webauthn"
        ],
        "examples": ["password"]
      },
      "authn-social-provider-id": {
        "type": "string",
        "description": "Social identity provider for authenticating a user's identity",
        "enum": [
          "google",
          "github",
          "facebook",
          "microsoftonline",
          "gitlab",
          "linkedin"
        ],
        "examples": ["github"]
      },
      "authn-provider-ids": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-provider-id"
        },
        "description": "Mechanisms for authenticating a user's identity",
        "examples": ["github", "google"]
      },
      "authn-mfa-code": {
        "type": "string",
        "description": "A six digit MFA code",
        "pattern": "^[0-9]{6}$",
        "examples": ["999999"]
      },
      "authn-mfa-provider": {
        "type": "string",
        "description": "Additional mechanism for authenticating a user's identity",
        "enum": ["totp", "email_otp", "sms_otp"],
        "examples": ["totp"]
      },
      "authn-mfa-providers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-mfa-provider"
        },
        "description": "Additional mechanisms for authenticating a user's identity",
        "examples": [["totp", "sms_otp"]]
      },
      "authn-mfa-totp-secret": {
        "type": "object",
        "description": "TOTP QR code and secret returned during enrollment",
        "properties": {
          "qr_image": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": ["qr_image", "secret"],
        "additionalProperties": false
      },
      "authn-otp-send-provider": {
        "type": "string",
        "description": "An email or SMS one-time-password provider",
        "enum": ["email_otp", "sms_otp"],
        "examples": ["email_otp"]
      },
      "authn-name": {
        "type": "string",
        "description": "A name",
        "$comment": "XXX would be nice to restrict this, but without disallowing unicode names.",
        "examples": ["Joe"]
      },
      "authn-phone": {
        "type": "string",
        "description": "A phone number",
        "format": "phone-E164-format",
        "examples": ["+1-808-555-0173"]
      },
      "authn-resource-id": {
        "type": "string",
        "description": "An ID for a resource",
        "pattern": "^pro_[a-z2-7]{32}$",
        "examples": ["pro_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-scope": {
        "type": "string",
        "description": "A scope",
        "pattern": "^[a-zA-Z0-9:*/_=-]+$",
        "examples": ["scope1"]
      },
      "authn-oauth-scope": {
        "type": "string",
        "description": "A list of space separated scope",
        "pattern": "^$|^[a-zA-Z0-9:*/_=-]+(?:\\s+[a-zA-Z0-9:*/_=-]+)*$",
        "examples": ["scope1 scope2"]
      },
      "authn-scopes": {
        "type": "array",
        "description": "A list of scopes",
        "items": {
          "$ref": "#/components/schemas/authn-scope"
        },
        "examples": [["scope1", "scope2"]]
      },
      "authn-template-scope": {
        "type": "string",
        "description": "A scope",
        "pattern": "^[a-zA-Z0-9:*/_{}-]+$",
        "examples": ["scope1"]
      },
      "authn-template-scopes": {
        "type": "array",
        "description": "A list of scopes",
        "items": {
          "$ref": "#/components/schemas/authn-scope"
        },
        "examples": [["scope1", "scope2"]]
      },
      "authn-profile-field-defn": {
        "type": "object",
        "description": "User profile field definitions",
        "properties": {
          "id": {
            "description": "Field identifier/key.",
            "type": "string",
            "maxLength": 32,
            "pattern": "^[a-z][0-9a-z_]*$"
          },
          "name": {
            "description": "Display name for the field.",
            "maxLength": 64,
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The data type for the field.",
            "enum": [
              "boolean",
              "date",
              "phone",
              "email",
              "integer",
              "string",
              ""
            ],
            "default": "string"
          },
          "show_on_signup": {
            "type": "boolean",
            "description": "If true, show this field on the signup form.",
            "default": false
          },
          "required": {
            "type": "boolean",
            "description": "If true, a value for this field is required.",
            "default": false
          },
          "builtin": {
            "type": "boolean",
            "description": "If true, the field id and type cannot be modified.",
            "default": false
          },
          "display_disabled": {
            "type": "boolean",
            "description": "If true, this field is disabled and will not be displayed.",
            "default": false
          }
        }
      },
      "authn-serviceaccount-id": {
        "type": "string",
        "description": "An ID for a service account",
        "pattern": "^psa_[a-z2-7]{32}$",
        "examples": ["psa_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-serviceaccount-info": {
        "type": "object",
        "description": "Service account information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "token_type": {
            "$ref": "#/components/schemas/authn-serviceaccount-token-type"
          },
          "scopes": {
            "$ref": "#/components/schemas/authn-scopes"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "owner",
          "token_type",
          "scopes"
        ],
        "additionalProperties": false,
        "examples": [
          {
            "id": "psa_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "created_at": "2022-11-21T21:21:40.258033Z",
            "updated_at": "2022-11-21T21:21:40.258033Z",
            "name": "My Service Account",
            "owner": "Joe User",
            "token_type": "service_account",
            "scopes": ["scope1", "scope2", "scope3"]
          }
        ]
      },
      "authn-filter-serviceaccounts": {
        "additionalProperties": false,
        "description": "Search filter for service accounts.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "owner": {
                "description": "Only records where owner equals this value.",
                "nullable": false,
                "type": "string"
              },
              "owner__contains": {
                "description": "Only records where owner includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "owner__in": {
                "description": "Only records where owner equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "scopes": {
                "description": "A list of tags that all must be present.",
                "items": {
                  "description": "Tags.",
                  "type": "string"
                },
                "type": "array"
              },
              "token_type": {
                "description": "Only records where token_type equals this value.",
                "nullable": false,
                "type": "string"
              },
              "token_type__contains": {
                "description": "Only records where token_type includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "token_type__in": {
                "description": "Only records where token_type equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "updated_at",
              "name",
              "owner",
              "token_type"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-domainlist-resource": {
        "type": "object",
        "description": "Authn domain allow/deny settings",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "domain_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": ["denylist", "allowlist"]
          }
        }
      },
      "authn-domainlist-resource-filled": {
        "$ref": "#/components/schemas/authn-domainlist-resource",
        "required": ["id", "domain_list", "type"]
      },
      "authn-service-config": {
        "type": "object",
        "description": "Authn Service Settings",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-service-config-id"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "audience": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            }
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "home_page": {
            "type": "string"
          },
          "allowed_callbacks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enable_allowed_ips": {
            "type": "boolean"
          },
          "ip_allow_list_rid": {
            "type": "string"
          },
          "enable_domainlist": {
            "type": "boolean"
          },
          "domainlist_rid": {
            "type": "string"
          },
          "enable_agreements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enable_disclaimer": {
            "type": "boolean"
          },
          "disclaimer_content": {
            "type": "string"
          },
          "default_signup_callback": {
            "type": "string"
          },
          "default_signin_callback": {
            "type": "string"
          },
          "default_logout_callback": {
            "type": "string"
          },
          "default_oauth_callback": {
            "type": "string"
          },
          "default_email_verification_callback": {
            "type": "string"
          },
          "default_password_reset_callback": {
            "type": "string"
          },
          "allow_internal": {
            "type": "boolean"
          },
          "user_pool_rid": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "branding_rid": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "login_domain": {
            "type": "string",
            "readOnly": true
          },
          "custom_domain": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-empty-string"
              },
              {
                "type": "string",
                "format": "hostname"
              }
            ],
            "description": "A verified domain to be configured for hosted pages"
          },
          "setup_domain": {
            "type": "string",
            "description": "An unverified domain"
          },
          "vault_config_id": {
            "type": "string"
          },
          "embargo_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-service-config-id"
              },
              {
                "type": "null"
              }
            ]
          },
          "domain_intel_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/intel-service-config-id"
              },
              {
                "type": "null"
              }
            ]
          },
          "ip_intel_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/intel-service-config-id"
              },
              {
                "type": "null"
              }
            ]
          },
          "user_intel_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/intel-service-config-id"
              },
              {
                "type": "null"
              }
            ]
          },
          "custom_email": {
            "type": ["object", "null"],
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "provider": {
                "type": "string",
                "enum": ["smtp"]
              },
              "from_address": {
                "$ref": "#/components/schemas/authn-email"
              },
              "name": {
                "type": "string",
                "description": "Friendly name, e.g. NAME <noreply@pangea.cloud>",
                "pattern": "^[^\n\r]*$"
              },
              "config": {
                "description": "Provider specific configuration",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn-service-config-custom-email-smtp"
                  }
                ]
              }
            }
          },
          "custom_captcha": {
            "type": ["object", "null"],
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "project": {
                "type": "string"
              },
              "site_key": {
                "type": "string"
              },
              "api_key_vault_id": {
                "type": "string"
              }
            }
          },
          "custom_sms": {
            "type": ["object", "null"],
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "provider": {
                "type": "string"
              },
              "config": {
                "description": "Provider specific configuration",
                "onOf": [
                  {
                    "$ref": "#/components/schemas/authn-service-config-custom-sms-twilio"
                  }
                ]
              }
            }
          },
          "embargo_check": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/embargo-check-settings"
              },
              {
                "type": "null"
              }
            ]
          },
          "ip_intel_check": {
            "$ref": "#/components/schemas/ip-intel-check-settings"
          },
          "user_session_enrichment": {
            "$ref": "#/components/schemas/enrichment-lookup-settings"
          },
          "domain_intel_check": {
            "$ref": "#/components/schemas/domain-intel-check-settings"
          },
          "audit_basic_activity": {
            "$ref": "#/components/schemas/audit-basic-activity-settings"
          }
        },
        "additionalProperties": false
      },
      "authn-service-config-filled": {
        "required": ["name", "user_pool_rid", "branding_rid"],
        "$ref": "#/components/schemas/authn-service-config"
      },
      "authn-service-config-id": {
        "type": "string",
        "description": "A service config ID",
        "pattern": "^pci_[a-z2-7]{32}$",
        "examples": ["pci_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "intel-service-config-id": {
        "type": "string",
        "description": "A service config ID",
        "pattern": "^pc[i|f]_[a-z2-7]{32}$",
        "examples": ["pci_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-service-config-result": {
        "required": [
          "id",
          "name",
          "home_page",
          "allowed_callbacks",
          "user_pool_rid",
          "branding_rid",
          "login_domain"
        ],
        "$ref": "#/components/schemas/authn-service-config"
      },
      "authn-service-config-custom-email-smtp": {
        "type": "object",
        "description": "SMTP Provider Config",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password_vault_id": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "implicit_tls": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "authn-service-config-custom-sms-twilio": {
        "type": "object",
        "description": "Twilio Provider Config",
        "properties": {
          "from_number": {
            "type": "string"
          },
          "sid": {
            "type": "string"
          },
          "token_vault_id": {
            "type": "string"
          }
        }
      },
      "embargo-check-settings": {
        "type": "object",
        "required": ["on_register", "on_login"],
        "description": "Embargo Check Settings",
        "properties": {
          "on_register": {
            "type": "boolean"
          },
          "on_login": {
            "type": "boolean"
          }
        }
      },
      "ip-intel-check-settings": {
        "type": "object",
        "required": [
          "enabled",
          "on_register_threshold",
          "on_login_threshold",
          "reputation_provider"
        ],
        "description": "IP Intel Check Settings",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "on_register_threshold": {
            "type": "integer"
          },
          "on_login_threshold": {
            "type": "integer"
          },
          "reputation_provider": {
            "type": "string"
          }
        }
      },
      "enrichment-lookup-settings": {
        "type": "object",
        "required": ["vpn_provider", "geolocate_provider", "proxy_provider"],
        "description": "User Session Enrichment Lookup Settings",
        "properties": {
          "geo_lookup": {
            "type": "boolean"
          },
          "vpn_lookup": {
            "type": "boolean"
          },
          "proxy_lookup": {
            "type": "boolean"
          },
          "vpn_provider": {
            "type": "string"
          },
          "geolocate_provider": {
            "type": "string"
          },
          "proxy_provider": {
            "type": "string"
          }
        }
      },
      "domain-intel-check-settings": {
        "type": "object",
        "required": [
          "enabled",
          "on_register_threshold",
          "on_login_threshold",
          "reputation_provider"
        ],
        "description": "Domain Intel Check Settings",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "on_register_threshold": {
            "type": "integer"
          },
          "on_login_threshold": {
            "type": "integer"
          },
          "reputation_provider": {
            "type": "string"
          }
        }
      },
      "authn-intelligence": {
        "type": "object",
        "description": "Intelligence Add-on Data",
        "properties": {
          "embargo": {
            "type": "boolean"
          },
          "ip_intel": {
            "$ref": "#/components/schemas/authn-intel-ip"
          },
          "domain_intel": {
            "$ref": "#/components/schemas/authn-intel-domain"
          },
          "user_intel": {
            "type": "boolean"
          }
        }
      },
      "authn-intel-ip": {
        "type": "object",
        "description": "IP Intelligence Data",
        "properties": {
          "is_bad": {
            "type": "boolean"
          },
          "is_vpn": {
            "type": "boolean"
          },
          "is_proxy": {
            "type": "boolean"
          },
          "reputation": {
            "$ref": "#/components/schemas/authn-intel-ip-reputation"
          },
          "geolocation": {
            "$ref": "#/components/schemas/authn-intel-ip-geolocation"
          }
        }
      },
      "authn-intel-domain": {
        "type": "object",
        "description": "Domain Intelligence Data",
        "properties": {
          "is_bad": {
            "type": "boolean"
          },
          "reputation": {
            "$ref": "#/components/schemas/authn-intel-domain-reputation"
          }
        }
      },
      "authn-intel-ip-reputation": {
        "type": "object",
        "description": "Reputation Intelligence Data",
        "properties": {
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "integer"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "authn-intel-ip-geolocation": {
        "type": "object",
        "description": "Geolocation Intelligence Data",
        "properties": {
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "postal_code": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          }
        }
      },
      "authn-intel-domain-reputation": {
        "type": "object",
        "description": "Reputation Intelligence Data",
        "properties": {
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "integer"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "audit-basic-activity-settings": {
        "type": "object",
        "required": ["audit_service_config_id", "enabled", "areas"],
        "description": "Audit Basic Activity Settings",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "audit_service_config_id": {
            "type": "string"
          },
          "areas": {
            "type": "object",
            "required": ["user_creation", "user_activity", "admin_activity"],
            "properties": {
              "user_creation": {
                "type": "boolean"
              },
              "user_activity": {
                "type": "boolean"
              },
              "admin_activity": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "authn-ticket": {
        "type": "object",
        "description": "Authn ticket state",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-ticket-id"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "type": {
            "type": "string",
            "enum": [
              "invite",
              "token",
              "oauth",
              "flow2Magiclink",
              "saml",
              "oidc_code"
            ]
          },
          "error": {
            "type": "string"
          },
          "expire": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "token": {
            "$ref": "#/components/schemas/authn-token"
          },
          "callback": {
            "$ref": "#/components/schemas/authn-callback"
          },
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          },
          "is_signup": {
            "type": "boolean"
          },
          "provider": {
            "$ref": "#/components/schemas/authn-provider-id"
          },
          "saml_provider_id": {
            "$ref": "#/components/schemas/saml-sp-id"
          },
          "saml_provider_name": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "invite_user": {
            "$ref": "#/components/schemas/authn-email"
          },
          "from_user": {
            "$ref": "#/components/schemas/authn-email"
          },
          "from_org": {
            "type": "string"
          },
          "auth": {
            "type": "string"
          },
          "require_mfa": {
            "type": "boolean"
          },
          "mfa_provider": {
            "$ref": "#/components/schemas/authn-mfa-provider"
          },
          "flow_id": {
            "$ref": "#/components/schemas/authn-flow-id"
          },
          "flow_choice": {
            "$ref": "#/components/schemas/authn-flow-choice"
          },
          "oauth2_client_id": {
            "type": "string"
          },
          "oauth2_scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          },
          "oauth2_code_challenge": {
            "type": "string"
          },
          "oauth2_code_challenge_method": {
            "type": "string"
          },
          "oauth2_nonce": {
            "type": "string"
          },
          "oauth2_refresh_token": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-token-refresh"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "authn-ticket-id": {
        "type": "string",
        "description": "A one-time ticket",
        "pattern": "^p[a-z][a-z2]_[a-z2-7]{32}$",
        "examples": ["pmc_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-timestamp": {
        "type": "string",
        "description": "A time in ISO-8601 format",
        "examples": ["2022-10-01T19:07:31.314Z"],
        "format": "date-time"
      },
      "authn-timestamp-nullable": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          {
            "type": "null"
          }
        ],
        "description": "A time in ISO-8601 format or null"
      },
      "authn-token": {
        "type": "string",
        "description": "A token value",
        "pattern": "^(p(ti|tr|ts|tu|cl)_[a-z2-7]{32})|([A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+)$",
        "examples": ["pts_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-token-refresh": {
        "type": "string",
        "description": "A refresh token value",
        "pattern": "^ptr_[a-z2-7]{32}$",
        "examples": ["ptr_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-token-user": {
        "type": "string",
        "description": "A user token value",
        "pattern": "^(ptu_[a-z2-7]{32})|([A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+)$",
        "examples": ["ptu_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "authn-token-id": {
        "type": "string",
        "description": "An ID for a token",
        "pattern": "^pmt_[a-z2-7]{32}$",
        "examples": ["pmt_rqo2uwlhgxy5gqpfgxjomccovphnfjo6"]
      },
      "authn-flow-complete-info": {
        "allOf": [
          {
            "$ref": "#/components/schemas/authn-session-info-creds"
          },
          {
            "type": "object",
            "properties": {
              "client_id": {
                "$ref": "#/components/schemas/authn-serviceaccount-id"
              },
              "scope": {
                "$ref": "#/components/schemas/authn-oauth-scope"
              },
              "oauth2_code_challenge": {
                "type": "string"
              },
              "oauth2_code_challenge_method": {
                "type": "string"
              },
              "oauth2_nonce": {
                "type": "string"
              },
              "oauth_response_types": {
                "$ref": "#/components/schemas/authn-oauth-client-response-types"
              },
              "oauth2_redirect_uri": {
                "$ref": "#/components/schemas/authn-callback"
              },
              "oauth2_state": {
                "$ref": "#/components/schemas/authn-callback-state"
              }
            }
          }
        ]
      },
      "authn-session-info-creds": {
        "type": "object",
        "description": "Credentials for a login session",
        "properties": {
          "refresh_token": {
            "$ref": "#/components/schemas/authn-token-info-creds"
          },
          "active_token": {
            "$ref": "#/components/schemas/authn-token-info-creds"
          }
        },
        "required": ["refresh_token"]
      },
      "authn-session-info-nocreds": {
        "type": "object",
        "description": "Information for a login session",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-token-id"
          },
          "type": {
            "$ref": "#/components/schemas/authn-token-type"
          },
          "life": {
            "$ref": "#/components/schemas/authn-duration-seconds"
          },
          "expire": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "identity": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "email": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/authn-scopes"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "active_token": {
            "$ref": "#/components/schemas/authn-token-info-nocreds"
          }
        },
        "required": [
          "id",
          "type",
          "life",
          "expire",
          "identity",
          "email",
          "profile",
          "created_at"
        ],
        "additionalProperties": false
      },
      "authn-session-list": {
        "type": "array",
        "description": "A list of sessions",
        "items": {
          "$ref": "#/components/schemas/authn-session-info-nocreds"
        }
      },
      "authn-token-info-nocreds": {
        "type": "object",
        "description": "A token and its information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-token-id"
          },
          "type": {
            "$ref": "#/components/schemas/authn-token-type"
          },
          "life": {
            "$ref": "#/components/schemas/authn-duration-seconds"
          },
          "expire": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "enabled": {
            "type": "boolean"
          },
          "identity": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "email": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/authn-scopes"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "intelligence": {
            "$ref": "#/components/schemas/authn-intelligence"
          },
          "audience": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "claims": {
            "$ref": "#/components/schemas/authn-token-claims"
          }
        },
        "required": [
          "id",
          "type",
          "life",
          "expire",
          "identity",
          "email",
          "profile",
          "created_at"
        ],
        "additionalProperties": false
      },
      "authn-token-info-creds": {
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/authn-token"
          },
          "id": {
            "$ref": "#/components/schemas/authn-token-id"
          },
          "type": {
            "$ref": "#/components/schemas/authn-token-type"
          },
          "life": {
            "$ref": "#/components/schemas/authn-duration-seconds"
          },
          "expire": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "enabled": {
            "type": "boolean"
          },
          "identity": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "email": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/authn-scopes"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "intelligence": {
            "$ref": "#/components/schemas/authn-intelligence"
          },
          "audience": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "claims": {
            "$ref": "#/components/schemas/authn-token-claims"
          }
        },
        "required": [
          "token",
          "id",
          "type",
          "life",
          "expire",
          "identity",
          "email",
          "profile",
          "created_at"
        ],
        "additionalProperties": false
      },
      "authn-token-info-user-creds": {
        "$ref": "#/components/schemas/authn-token-info-creds",
        "examples": [
          {
            "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "id": "pmt_xqo2uwlhgxy5gqpfgxjomccovphnfjo6",
            "type": "user",
            "life": 172605,
            "expire": "2022-11-23T21:21:40.256969Z",
            "enabled": true,
            "identity": "pui_xpkhwpnz2cmegsws737xbsqnmnuwtvm5",
            "email": "joe.user@email.com",
            "scopes": [],
            "profile": {
              "first_name": "Joe",
              "last_name": "User",
              "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
            },
            "created_at": "2022-11-21T21:21:40.258033Z"
          }
        ]
      },
      "authn-token-info-user-nocreds": {
        "$ref": "#/components/schemas/authn-token-info-nocreds",
        "examples": [
          {
            "token": "ptu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "id": "pmt_xqo2uwlhgxy5gqpfgxjomccovphnfjo6",
            "type": "user",
            "life": 172605,
            "expire": "2022-11-23T21:21:40.256969Z",
            "enabled": true,
            "identity": "pui_xpkhwpnz2cmegsws737xbsqnmnuwtvm5",
            "email": "joe.user@email.com",
            "scopes": [],
            "profile": {
              "first_name": "Joe",
              "last_name": "User",
              "image_url": "https://avatars.githubusercontent.com/u/19916952?v=4"
            },
            "created_at": "2022-11-21T21:21:40.258033Z"
          }
        ]
      },
      "authn-token-info-service-creds": {
        "$ref": "#/components/schemas/authn-token-info-creds",
        "examples": [
          {
            "token": "pts_7zzqabqbqymt4stz3ygivieo6bv77z36",
            "id": "pmt_mhotohiowr2zubwxofp2vdxiojahzqpg",
            "type": "service",
            "life": 2591999,
            "expire": "2022-12-22T01:28:30.822926Z",
            "enabled": true,
            "identity": "My Service Token",
            "email": "",
            "scopes": ["scope1", "scope2"],
            "profile": {},
            "created_at": "2022-11-22T01:28:30.824144Z"
          }
        ]
      },
      "authn-token-info-serviceaccount-creds": {
        "$ref": "#/components/schemas/authn-token-info-creds",
        "examples": [
          {
            "token": "pts_7zzqabqbqymt4stz3ygivieo6bv77z36",
            "id": "pmt_mhotohiowr2zubwxofp2vdxiojahzqpg",
            "type": "service_account",
            "life": 2591999,
            "identity": "psa_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "expire": "2022-12-22T01:28:30.822926Z",
            "enabled": true,
            "email": "My Service Account",
            "owner": "Joe User",
            "scopes": ["scope1", "scope2", "scope3"],
            "profile": {},
            "created_at": "2022-11-22T01:28:30.824144Z"
          }
        ]
      },
      "authn-token-list": {
        "type": "array",
        "description": "A list of tokens and their information",
        "items": {
          "$ref": "#/components/schemas/authn-token-info-nocreds"
        },
        "examples": [
          [
            {
              "token": "pts_7zzqabqbqymt4stz3ygivieo6bv77z36",
              "id": "pmt_mhotohiowr2zubwxofp2vdxiojahzqpg",
              "type": "service",
              "life": 2591999,
              "expire": "2022-12-22T01:28:30.822926Z",
              "enabled": true,
              "identity": "My Service Token",
              "email": "",
              "scopes": ["scope1", "scope2"],
              "profile": {},
              "created_at": "2022-11-22T01:28:30.824144Z"
            }
          ]
        ]
      },
      "authn-token-type": {
        "type": "string",
        "description": "A token type",
        "enum": [
          "client",
          "service",
          "service_account",
          "service_account_client",
          "service_account_pangea",
          "session",
          "user"
        ],
        "examples": ["user"]
      },
      "authn-serviceaccount-token-type": {
        "type": "string",
        "description": "A service account token type",
        "enum": [
          "service_account",
          "service_account_client",
          "service_account_pangea",
          "service_account_user",
          "client_account"
        ],
        "examples": ["service_account"]
      },
      "authn-v1-user-info": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "scopes": {
            "$ref": "#/components/schemas/authn-scopes"
          },
          "id_providers": {
            "$ref": "#/components/schemas/authn-provider-ids"
          },
          "mfa_providers": {
            "$ref": "#/components/schemas/authn-mfa-providers"
          },
          "require_mfa": {
            "type": "boolean",
            "description": "True if the user must use MFA during authentication"
          },
          "verified": {
            "type": "boolean",
            "description": "True if the user's email has been verified"
          },
          "disabled": {
            "type": "boolean",
            "description": "True if the service administrator has disabled user account"
          },
          "accepted_eula_id": {
            "$ref": "#/components/schemas/authn-agreement-id"
          },
          "last_login_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "required": [
          "id",
          "email",
          "profile",
          "scopes",
          "id_providers",
          "mfa_providers",
          "require_mfa",
          "verified"
        ],
        "additionalProperties": false,
        "examples": [
          {
            "id": "pui_ypkhwpnz2cmegsws737xbsqnmnuwtbm9",
            "email": "joe.user@email.com",
            "profile": {
              "first_name": "Joe",
              "last_name": "User",
              "image_url": "https://avatars.githubusercontent.com/u/19916453?v=4"
            },
            "scopes": [],
            "id_providers": ["google"],
            "mfa_providers": [],
            "require_mfa": false,
            "verified": false,
            "disabled": false,
            "accepted_eula_id": "peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "last_login_at": "2022-11-21T21:21:40.256969Z"
          }
        ]
      },
      "authn-v2-authenticator-info": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-authenticator-id"
          },
          "type": {
            "$ref": "#/components/schemas/authn-auth-type"
          },
          "provider": {
            "type": "string"
          },
          "provider_name": {
            "type": "string"
          },
          "rpid": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          },
          "enrolling_browser": {
            "type": "string"
          },
          "enrolling_ip": {
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "required": ["id", "type", "enabled", "created_at", "updated_at"],
        "additionalProperties": false,
        "examples": [
          {
            "id": "pui_ypkhwpnz2cmegsws737xbsqnmnuwtbm9",
            "type": "password",
            "enabled": true,
            "phase": "primary"
          }
        ]
      },
      "authn-v2-authenticator-info-list": {
        "type": "array",
        "description": "A list of authenticators",
        "items": {
          "$ref": "#/components/schemas/authn-v2-authenticator-info"
        }
      },
      "authn-v2-user-info": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "username": {
            "$ref": "#/components/schemas/authn-username"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          },
          "phone": {
            "$ref": "#/components/schemas/authn-phone"
          },
          "profile": {
            "$ref": "#/components/schemas/authn-user-profile"
          },
          "verified": {
            "type": "boolean",
            "description": "True if the user's email has been verified"
          },
          "disabled": {
            "type": "boolean",
            "description": "True if the service administrator has disabled user account"
          },
          "locked_out": {
            "type": "boolean",
            "description": "True if the user account has been locked out"
          },
          "accepted_eula_id": {
            "$ref": "#/components/schemas/authn-agreement-id"
          },
          "accepted_privacy_policy_id": {
            "$ref": "#/components/schemas/authn-agreement-id"
          },
          "last_login_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "login_count": {
            "type": "integer"
          },
          "last_login_ip": {
            "type": "string"
          },
          "last_login_city": {
            "type": "string"
          },
          "last_login_country": {
            "type": "string"
          },
          "authenticators": {
            "$ref": "#/components/schemas/authn-v2-authenticator-info-list"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["id", "email", "profile", "verified"],
        "additionalProperties": false,
        "examples": [
          {
            "id": "pui_ypkhwpnz2cmegsws737xbsqnmnuwtbm9",
            "email": "joe.user@email.com",
            "profile": {
              "first_name": "Joe",
              "last_name": "User",
              "image_url": "https://avatars.githubusercontent.com/u/19916453?v=4"
            },
            "verified": false,
            "disabled": false,
            "locked_out": false,
            "accepted_eula_id": "peu_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "accepted_privacy_policy_id": "peu_9ecwtvtpswyjtlsx52b7yyi2l7zot9ec",
            "last_login_at": "2022-11-21T21:21:40.256969Z"
          }
        ]
      },
      "authn-user-profile": {
        "type": "object",
        "description": "A user profile as a collection of string properties",
        "patternProperties": {
          ".*": {
            "type": "string"
          }
        },
        "examples": [
          {
            "first_name": "Joe",
            "last_name": "User"
          }
        ]
      },
      "authn-user-profile-edits": {
        "type": "object",
        "description": "Updates to a user profile",
        "patternProperties": {
          ".*": {
            "type": ["string", "null"],
            "description": "New value, or null to delete the existing value"
          }
        }
      },
      "authn-social-id-and-secret": {
        "type": "object",
        "description": "ID and secret for a social ID provider",
        "properties": {
          "use_test_creds": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": ["id", "secret"]
      },
      "authn-userpool-resource": {
        "type": "object",
        "description": "Userpool configuration",
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "if": {
              "required": ["version"]
            },
            "then": {},
            "else": {
              "$ref": "#/components/schemas/authn-userpool-resource-v0"
            }
          },
          {
            "if": {
              "required": ["version"],
              "properties": {
                "version": {
                  "const": "1"
                }
              }
            },
            "then": {
              "$ref": "#/components/schemas/authn-userpool-resource-v1"
            }
          }
        ]
      },
      "authn-userpool-resource-v0": {
        "type": "object",
        "description": "V0 Userpool configuration",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "auth_providers": {
            "$ref": "#/components/schemas/authn-provider-ids"
          },
          "mfa_providers": {
            "$ref": "#/components/schemas/authn-mfa-providers"
          },
          "allow_signup": {
            "type": "boolean"
          },
          "captcha_verification": {
            "type": "boolean"
          },
          "email_verification": {
            "type": "boolean"
          },
          "require_mfa": {
            "type": "boolean"
          },
          "totp_issuer": {
            "type": "string"
          },
          "default_mfa": {
            "$ref": "#/components/schemas/authn-mfa-provider"
          },
          "user_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "refresh_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "service_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "invite_ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "oidc_ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "flow_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "email_mfa_period": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "user_token_refreshable": {
            "type": "boolean"
          },
          "password_policy": {
            "$ref": "#/components/schemas/authn-password-policy"
          },
          "allow_auto_login": {
            "type": "boolean"
          },
          "ticket_url": {
            "type": "string"
          },
          "social": {
            "type": "object",
            "properties": {
              "callback_url": {
                "type": "string"
              },
              "google": {
                "$ref": "#/components/schemas/authn-social-id-and-secret"
              },
              "github": {
                "$ref": "#/components/schemas/authn-social-id-and-secret"
              },
              "facebook": {
                "$ref": "#/components/schemas/authn-social-id-and-secret"
              },
              "microsoftonline": {
                "$ref": "#/components/schemas/authn-social-id-and-secret"
              }
            },
            "required": []
          },
          "jwt_signing": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "vault_config_id": {
                "$ref": "#/components/schemas/authn-service-config-id"
              },
              "vault_key_id": {
                "$ref": "#/components/schemas/vault-key-id"
              },
              "issuer": {
                "type": "string"
              }
            },
            "required": []
          },
          "profile_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-profile-field-defn"
            }
          },
          "session_require_user_token": {
            "type": "boolean"
          },
          "webauthn": {
            "type": "object",
            "required": ["rpid", "rpname", "rporigins"],
            "properties": {
              "rpid": {
                "type": "string"
              },
              "rpname": {
                "type": "string"
              },
              "rporigins": {
                "type": ["array", "null"],
                "items": {
                  "type": "string",
                  "format": "hostname"
                }
              }
            }
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-userpool-token-conf": {
        "type": "object",
        "properties": {
          "user_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "refresh_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "service_token_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "session_require_user_token": {
            "type": "boolean"
          },
          "jwt_signing": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "vault_config_id": {
                "$ref": "#/components/schemas/authn-service-config-id"
              },
              "vault_key_id": {
                "$ref": "#/components/schemas/vault-key-id"
              },
              "issuer": {
                "type": "string"
              }
            },
            "required": []
          }
        }
      },
      "authn-userpool-primary-conf": {
        "type": "object",
        "properties": {
          "auth_type": {
            "$ref": "#/components/schemas/authn-auth-type"
          },
          "enabled": {
            "type": "boolean"
          },
          "skip_secondary": {
            "type": "boolean"
          }
        }
      },
      "authn-userpool-secondary-conf": {
        "type": "object",
        "properties": {
          "auth_type": {
            "$ref": "#/components/schemas/authn-auth-type"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "authn-userpool-onetime-conf": {
        "type": "object",
        "properties": {
          "auth_type": {
            "$ref": "#/components/schemas/authn-auth-type"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "authn-userpool-passkey-conf": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "skip_secondary": {
            "type": "boolean"
          },
          "allow_fallback": {
            "type": "boolean"
          }
        }
      },
      "authn-userpool-requiredauth-conf": {
        "type": "object",
        "properties": {
          "primaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-userpool-primary-conf"
            }
          },
          "secondaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-userpool-secondary-conf"
            }
          },
          "one_time_auths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-userpool-onetime-conf"
            }
          },
          "passkey": {
            "$ref": "#/components/schemas/authn-userpool-passkey-conf"
          },
          "allow_signup": {
            "type": "boolean"
          },
          "signup_captcha": {
            "type": "boolean"
          },
          "require_secondary": {
            "type": "boolean"
          },
          "email_verification": {
            "type": "boolean"
          }
        }
      },
      "authn-userpool-password-conf": {
        "type": "object",
        "properties": {
          "chars_min": {
            "type": "integer"
          },
          "chars_max": {
            "type": "integer"
          },
          "lower_min": {
            "type": "integer"
          },
          "upper_min": {
            "type": "integer"
          },
          "punct_min": {
            "type": "integer"
          },
          "number_min": {
            "type": "integer"
          }
        }
      },
      "authn-userpool-oauth-conf": {
        "type": "object",
        "description": "OAuth settings for a social identity provider",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "use_test_creds": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "authn-userpool-social-conf": {
        "type": "object",
        "properties": {
          "google": {
            "$ref": "#/components/schemas/authn-userpool-oauth-conf"
          },
          "github": {
            "$ref": "#/components/schemas/authn-userpool-oauth-conf"
          },
          "facebook": {
            "$ref": "#/components/schemas/authn-userpool-oauth-conf"
          },
          "microsoftonline": {
            "$ref": "#/components/schemas/authn-userpool-oauth-conf"
          }
        }
      },
      "auth-saml-sp-conf": {
        "type": "object",
        "properties": {
          "sp_settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/saml-service-provider"
            }
          }
        }
      },
      "authn-userpool-conditional-mfa-conf": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "strict_mode": {
            "description": "Enforce Device and IP match when enabled.",
            "type": "boolean"
          },
          "max_entry_count": {
            "description": "Maximum number of entries per-user.",
            "type": "integer"
          },
          "lifetime": {
            "description": "Number of days that an entry is valid.",
            "type": "integer"
          }
        }
      },
      "authn-userpool-username-format-conf": {
        "type": "string",
        "description": "Format of usernames",
        "enum": ["", "string", "email", "phone"],
        "examples": ["email"],
        "$comment": "XXX Empty string defaults to email on the backend"
      },
      "authn-userpool-totp-conf": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          }
        }
      },
      "authn-userpool-emailotp-conf": {
        "type": "object",
        "properties": {
          "life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          }
        }
      },
      "authn-userpool-smsotp-conf": {
        "type": "object",
        "properties": {
          "life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          }
        }
      },
      "authn-userpool-failedlogin-conf": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Failed Login Policy"
          },
          "failed_count": {
            "description": "Maximum number of failed logins.",
            "type": "integer"
          },
          "failed_timeframe": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "lockout_period": {
            "$ref": "#/components/schemas/authn-duration-golang"
          }
        }
      },
      "authn-userpool-groups-conf": {
        "max_returned_user_groups": {
          "type": "integer"
        }
      },
      "authn-userpool-impossible-travel-conf": {
        "enabled": {
          "type": "boolean"
        },
        "velocity": {
          "type": "integer"
        }
      },
      "authn-userpool-resource-v1": {
        "type": "object",
        "description": "V1 Userpool configuration",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-resource-id"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "version": {
            "type": "string"
          },
          "token": {
            "$ref": "#/components/schemas/authn-userpool-token-conf"
          },
          "ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "invite_ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "oidc_ticket_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "flow_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "client_secret_life": {
            "$ref": "#/components/schemas/authn-duration-golang"
          },
          "profile_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-profile-field-defn"
            }
          },
          "required_auth": {
            "$ref": "#/components/schemas/authn-userpool-requiredauth-conf"
          },
          "password": {
            "$ref": "#/components/schemas/authn-userpool-password-conf"
          },
          "social": {
            "$ref": "#/components/schemas/authn-userpool-social-conf"
          },
          "totp": {
            "$ref": "#/components/schemas/authn-userpool-totp-conf"
          },
          "email_otp": {
            "$ref": "#/components/schemas/authn-userpool-emailotp-conf"
          },
          "sms_otp": {
            "$ref": "#/components/schemas/authn-userpool-smsotp-conf"
          },
          "failed_login": {
            "$ref": "#/components/schemas/authn-userpool-failedlogin-conf"
          },
          "saml": {
            "$ref": "#/components/schemas/auth-saml-sp-conf"
          },
          "conditional_mfa": {
            "$ref": "#/components/schemas/authn-userpool-conditional-mfa-conf"
          },
          "username_format": {
            "$ref": "#/components/schemas/authn-userpool-username-format-conf"
          },
          "domain_override": {
            "$ref": "#/components/schemas/auth-userpool-domain-override"
          },
          "authz_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-service-config-id"
              },
              {
                "type": "null"
              }
            ]
          },
          "groups": {
            "$ref": "#/components/schemas/authn-userpool-groups-conf"
          },
          "impossible_travel": {
            "$ref": "#/components/schemas/authn-userpool-impossible-travel-conf"
          }
        },
        "additionalProperties": false
      },
      "auth-userpool-domain-override": {
        "type": "object",
        "description": "V1 Userpool Domain Override Configuration",
        "patternProperties": {
          ".*": {
            "type": "object",
            "properties": {
              "required_auth": {
                "$ref": "#/components/schemas/authn-userpool-requiredauth-conf"
              },
              "password": {
                "$ref": "#/components/schemas/authn-userpool-password-conf"
              },
              "social": {
                "$ref": "#/components/schemas/authn-userpool-social-conf"
              },
              "totp": {
                "$ref": "#/components/schemas/authn-userpool-totp-conf"
              },
              "email_otp": {
                "$ref": "#/components/schemas/authn-userpool-emailotp-conf"
              },
              "sms_otp": {
                "$ref": "#/components/schemas/authn-userpool-smsotp-conf"
              },
              "failed_login": {
                "$ref": "#/components/schemas/authn-userpool-failedlogin-conf"
              },
              "saml": {
                "$ref": "#/components/schemas/auth-saml-sp-conf"
              },
              "conditional_mfa": {
                "$ref": "#/components/schemas/authn-userpool-conditional-mfa-conf"
              },
              "impossible_travel": {
                "$ref": "#/components/schemas/authn-userpool-impossible-travel-conf"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "authn-userpool-resource-result": {
        "required": [
          "id",
          "auth_providers",
          "mfa_providers",
          "allow_signup",
          "captcha_verification",
          "email_verification",
          "require_mfa",
          "totp_issuer",
          "default_mfa",
          "user_token_life",
          "refresh_token_life",
          "service_token_life",
          "ticket_life",
          "email_mfa_period",
          "user_token_refreshable",
          "password_chars_min",
          "password_chars_max",
          "password_lower_min",
          "password_upper_min",
          "password_punct_min",
          "allow_auto_login",
          "ticket_url",
          "social"
        ],
        "$ref": "#/components/schemas/authn-userpool-resource"
      },
      "authn-invite-info": {
        "type": "object",
        "description": "A pending user invitation",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-ticket-id"
          },
          "inviter": {
            "$ref": "#/components/schemas/authn-email"
          },
          "invite_org": {
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          },
          "callback": {
            "$ref": "#/components/schemas/authn-callback"
          },
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          },
          "require_mfa": {
            "type": "boolean",
            "description": "Require the user to authenticate with MFA"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "expire": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "examples": [
          {
            "id": "pmi_vjb237phymwzzlulrtxegapha5lqevxy",
            "inviter": "joe.user@email.com",
            "invite_org": "",
            "email": "bob.user@email.com",
            "callback": "https://www.myserver.com/callback",
            "state": "C8VTNjY2icUMeiDHFHUxBwiAstEGqaayU4",
            "require_mfa": false,
            "created_at": "2022-11-22T22:26:56.860720Z",
            "expire": "2022-11-24T22:26:56.859258Z"
          }
        ]
      },
      "authn-invite-infos": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-invite-info"
        },
        "description": "A list of pending user invitations"
      },
      "vault-key-id": {
        "type": "string",
        "description": "A vault key ID",
        "pattern": "^pvi_[a-z2-7]{32}$",
        "examples": ["pvi_xpkhwpnz2cmegsws737xbsqnmnuwtbm5"]
      },
      "external-provision-setting-id": {
        "type": "string",
        "description": "An ID for a provision setting",
        "pattern": "^pep_[a-z2-7]{32}$",
        "examples": ["pep_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "external-provisioning-provider-settings-info": {
        "type": "object",
        "description": "an external provisioning provider settings",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/external-provision-setting-id"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "name": {
            "$ref": "#/components/schemas/external-non-empty-str-field"
          },
          "provider": {
            "$ref": "#/components/schemas/external-provisioning-provider-type"
          },
          "base_url": {
            "$ref": "#/components/schemas/external-base-url-field"
          },
          "unique_user_identifier_field": {
            "$ref": "#/components/schemas/external-non-empty-str-field"
          },
          "auth_settings": {
            "$ref": "#/components/schemas/external-provisioning-provider-auth-settings"
          },
          "field_mappings": {
            "$ref": "#/components/schemas/external-provisioning-provider-field-mappings"
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "base_url",
          "unique_user_identifier_field",
          "auth_settings"
        ],
        "additionalProperties": false,
        "examples": [
          {
            "name": "auth0-provisioning-settings",
            "provider": "auth0",
            "base_url": "https://example-auth0-domain.us.auth0.com",
            "unique_user_identifier_field": "email",
            "auth_settings": {
              "auth_mode": "apikey",
              "vault_config_id": "pci_xpkhwpnz2cmegsws737xbsqnmnuwtbm5",
              "apikey": {
                "prefix": "Bearer",
                "key": "api_key"
              }
            },
            "field_mappings": [
              {
                "pangea_authn_field": "name",
                "external_idp_field": "username"
              },
              {
                "pangea_authn_field": "profile.first_name",
                "external_idp_field": "first_name"
              }
            ]
          }
        ]
      },
      "external-non-empty-str-field": {
        "type": "string",
        "minLength": 1
      },
      "external-base-url-field": {
        "type": "string",
        "minLength": 1,
        "format": "http-url"
      },
      "external-provisioning-provider-auth-settings": {
        "type": "object",
        "description": "an external provisioning provider auth settings",
        "properties": {
          "auth_mode": {
            "$ref": "#/components/schemas/external-provisioning-provider-auth-mode"
          },
          "vault_key_id": {
            "$ref": "#/components/schemas/vault-key-id"
          },
          "vault_config_id": {
            "$ref": "#/components/schemas/authn-service-config-id"
          },
          "basicauth": {
            "type": "object",
            "description": "basic authentication settings",
            "properties": {
              "username": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              },
              "password": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              }
            }
          },
          "apikey": {
            "type": "object",
            "description": "api key settings",
            "properties": {
              "key": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              },
              "prefix": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              }
            }
          },
          "oauth2": {
            "type": "object",
            "description": "oauth2 settings",
            "properties": {
              "client_id": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              },
              "client_secret": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              },
              "token_url": {
                "$ref": "#/components/schemas/external-non-empty-str-field"
              },
              "endpoint_params": {
                "$ref": "#/components/schemas/external-provisioning-provider-oauth2-endpoint"
              }
            }
          }
        },
        "allOf": [
          {
            "oneOf": [
              {
                "required": ["auth_mode", "vault_config_id", "basicauth"]
              },
              {
                "required": ["auth_mode", "vault_config_id", "oauth2"]
              },
              {
                "required": ["auth_mode", "vault_config_id", "apikey"]
              }
            ]
          },
          {
            "if": {
              "properties": {
                "auth_mode": {
                  "const": "basicauth"
                }
              }
            },
            "then": {
              "required": ["basicauth"]
            }
          },
          {
            "if": {
              "properties": {
                "auth_mode": {
                  "const": "oauth2"
                }
              }
            },
            "then": {
              "required": ["oauth2"]
            }
          },
          {
            "if": {
              "properties": {
                "auth_mode": {
                  "const": "apikey"
                }
              }
            },
            "then": {
              "required": ["apikey"]
            }
          }
        ]
      },
      "external-provisioning-provider-field-mappings": {
        "type": "array",
        "description": "provision provider field mapping with pangea user profile",
        "items": {
          "$ref": "#/components/schemas/external-provisioning-provider-map-field"
        },
        "examples": [
          [
            {
              "pangea_authn_field": "name",
              "external_idp_field": "username"
            },
            {
              "pangea_authn_field": "profile.first_name",
              "external_idp_field": "first_name"
            }
          ]
        ]
      },
      "external-provisioning-provider-oauth2-endpoint": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "examples": [
          {
            "audience_url": ["https://example-audience-url"]
          }
        ]
      },
      "external-provisioning-provider-map-field": {
        "type": "object",
        "properties": {
          "pangea_authn_field": {
            "type": "string"
          },
          "external_idp_field": {
            "type": "string"
          }
        },
        "required": ["external_idp_field", "pangea_authn_field"]
      },
      "external-provisioning-provider-auth-mode": {
        "description": "provisioning provider authentication mode",
        "type": "string",
        "enum": ["basicauth", "apikey", "oauth2"]
      },
      "external-provisioning-provider-type": {
        "description": "provisioning provider type",
        "type": "string",
        "enum": ["auth0", "scim"]
      },
      "authn-filter-provision-settings": {
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {
              "^auth_settings_([A-Za-z]+)$": {
                "description": "Only records where metadata field equals this value.",
                "type": "string"
              },
              "^auth_settings_([A-Za-z]+)__contains$": {
                "description": "Only records where metadata field contains one of these substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "^auth_settings_([A-Za-z]+)__exists$": {
                "description": "Only records where metadata field exists (true) or doesn't (false).",
                "type": "boolean"
              },
              "^field_mappings_([A-Za-z]+)$": {
                "description": "Only records where metadata field equals this value.",
                "type": "string"
              },
              "^field_mappings_([A-Za-z]+)__contains$": {
                "description": "Only records where metadata field contains one of these substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "^field_mappings_([A-Za-z]+)__exists$": {
                "description": "Only records where metadata field exists (true) or doesn't (false).",
                "type": "boolean"
              }
            },
            "properties": {
              "base_url": {
                "description": "Only records where base_url equals this value.",
                "nullable": false,
                "type": "string"
              },
              "base_url__contains": {
                "description": "Only records where base_url includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "base_url__in": {
                "description": "Only records where base_url equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "provider": {
                "description": "Only records where provider equals this value.",
                "nullable": false,
                "type": "string"
              },
              "provider__contains": {
                "description": "Only records where provider includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "provider__in": {
                "description": "Only records where provider equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "unique_user_identifier_field": {
                "description": "Only records where unique_user_identifier_field equals this value.",
                "nullable": false,
                "type": "string"
              },
              "unique_user_identifier_field__contains": {
                "description": "Only records where unique_user_identifier_field includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "unique_user_identifier_field__in": {
                "description": "Only records where unique_user_identifier_field equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "name",
              "provider",
              "base_url",
              "unique_user_identifier_field",
              "created_at"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-ipallowlist-resource": {
        "type": "object",
        "description": "IP Allow List Resource",
        "properties": {
          "name": {
            "type": "string",
            "description": "resource name"
          },
          "allowed_ips": {
            "type": ["array", "null"],
            "items": {
              "type": "object",
              "attributes": {
                "name": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "authn-ipallowlist-resource-result": {
        "allOf": [
          {
            "$ref": "#/components/schemas/authn-ipallowlist-resource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "authn-filter-user-import": {
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "type",
              "created_at",
              "updated_at",
              "published_at",
              "name",
              "text"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object",
        "examples": [
          {
            "id": "pum_22gu57qn3vq3lsmdszopghgd4xijw2ye"
          }
        ]
      },
      "user-import-result-summary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/user-import-id"
          },
          "status": {
            "$ref": "#/components/schemas/user-import-status"
          },
          "summary": {
            "type": "object",
            "properties": {
              "total": {
                "description": "total number of user record is processed from the given source",
                "type": "integer"
              },
              "successful": {
                "description": "count of successful imported users",
                "type": "integer"
              },
              "failed": {
                "description": "count of failed imported users",
                "type": "integer"
              },
              "skipped": {
                "description": "count of existing user records, which was skipped during import",
                "type": "integer"
              },
              "updated_at": {
                "$ref": "#/components/schemas/authn-timestamp"
              },
              "created_at": {
                "$ref": "#/components/schemas/authn-timestamp"
              }
            },
            "required": [
              "total",
              "successful",
              "failed",
              "skipped",
              "updated_at",
              "created_at"
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": ["success", "skipped", "failed"]
                },
                "message": {
                  "type": "string"
                },
                "created_at": {
                  "$ref": "#/components/schemas/authn-timestamp"
                }
              },
              "required": ["user_id", "status", "message", "created_at"]
            }
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "required": [
          "summary",
          "details",
          "name",
          "id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "authn-flow2-onetime-auth": {
        "type": "object",
        "properties": {
          "auth_type": {
            "$ref": "#/components/schemas/authn-auth-type"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          },
          "phone": {
            "$ref": "#/components/schemas/authn-phone"
          },
          "password": {
            "$ref": "#/components/schemas/authn-password"
          },
          "password_hash": {
            "type": "string"
          }
        },
        "required": ["auth_type"]
      },
      "authn-flow2-onetime-auths": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/authn-flow2-onetime-auth"
        }
      },
      "authn-flow2-param-agreements": {
        "type": "object",
        "properties": {
          "agreements": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "$ref": "#/components/schemas/authn-agreement-info"
              }
            }
          }
        },
        "required": ["agreements"],
        "additionalProperties": false
      },
      "authn-flow2-param-oauth-consent": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-oauth-scope"
            }
          }
        },
        "required": ["agreements"],
        "additionalProperties": false
      },
      "authn-flow2-update-agreements": {
        "type": "object",
        "properties": {
          "agreed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-agreement-id"
            }
          }
        },
        "required": ["agreed"],
        "additionalProperties": false
      },
      "authn-flow2-update-oauth-consent": {
        "type": "object",
        "properties": {
          "scope_selections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-oauth-user-consent-scope-selection"
            }
          }
        },
        "required": ["scope_selections"],
        "additionalProperties": false
      },
      "authn-flow2-restart-agreements": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-restart-oauth-consent": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-captcha": {
        "type": "object",
        "properties": {
          "site_key": {
            "type": "string"
          }
        },
        "required": ["site_key"],
        "additionalProperties": false
      },
      "authn-flow2-update-captcha": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": ["code"],
        "additionalProperties": false
      },
      "authn-flow2-restart-captcha": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-email-otp": {
        "type": "object",
        "properties": {
          "sent": {
            "type": "boolean"
          },
          "enrollment": {
            "type": "boolean"
          },
          "resend_time": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "required": ["sent", "enrollment"],
        "additionalProperties": false
      },
      "authn-flow2-update-email-otp": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/authn-mfa-code"
          }
        },
        "required": ["code"],
        "additionalProperties": false
      },
      "authn-flow2-restart-email-otp": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/authn-email"
          }
        },
        "optional": ["email"],
        "additionalProperties": false
      },
      "authn-flow2-update-empty": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-magiclink": {
        "type": "object",
        "properties": {
          "sent": {
            "type": "boolean"
          },
          "resend_time": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          }
        },
        "required": ["sent", "state"],
        "additionalProperties": false
      },
      "authn-flow2-update-magiclink": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          },
          "code": {
            "$ref": "#/components/schemas/authn-callback-code"
          }
        },
        "required": ["state", "code"],
        "optional": ["email"],
        "additionalProperties": false
      },
      "authn-flow2-restart-magiclink": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/authn-email"
          }
        },
        "optional": ["email"],
        "additionalProperties": false
      },
      "authn-flow2-param-passkey": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "started": {
            "type": "boolean"
          },
          "local_only": {
            "type": "boolean"
          },
          "authentication": {
            "type": "object"
          },
          "discovery": {
            "type": "boolean"
          },
          "registration": {
            "type": "object"
          }
        },
        "required": ["enrollment", "started"],
        "additionalProperties": false
      },
      "authn-flow2-update-passkey": {
        "type": "object",
        "properties": {
          "authentication": {
            "type": "object"
          },
          "registration": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "authn-flow2-restart-passkey": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-password": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "password_policy": {
            "$ref": "#/components/schemas/authn-password-policy"
          }
        },
        "required": ["enrollment", "password_policy"],
        "additionalProperties": false
      },
      "authn-flow2-update-password": {
        "type": "object",
        "properties": {
          "password": {
            "$ref": "#/components/schemas/authn-password"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          }
        },
        "required": ["password"],
        "optional": ["email"],
        "additionalProperties": false
      },
      "authn-flow2-restart-password": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-profile": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-profile-field-defn"
            }
          }
        },
        "required": ["fields"],
        "additionalProperties": false
      },
      "authn-flow2-update-profile": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "properties": {
              "first_name": {
                "$ref": "#/components/schemas/authn-name"
              },
              "last_name": {
                "$ref": "#/components/schemas/authn-name"
              },
              "phone": {
                "$ref": "#/components/schemas/authn-phone"
              }
            }
          }
        },
        "required": ["profile"],
        "additionalProperties": false
      },
      "authn-flow2-restart-profile": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-provisional-enrollment": {
        "$ref": "#/components/schemas/authn-flow2-param-magiclink"
      },
      "authn-flow2-update-provisional-enrollment": {
        "$ref": "#/components/schemas/authn-flow2-update-magiclink"
      },
      "authn-flow2-restart-provisional-enrollment": {
        "$ref": "#/components/schemas/authn-flow2-restart-magiclink"
      },
      "authn-flow2-param-reset-password": {
        "$ref": "#/components/schemas/authn-flow2-param-magiclink"
      },
      "authn-flow2-update-reset-password": {
        "$ref": "#/components/schemas/authn-flow2-update-magiclink"
      },
      "authn-flow2-restart-reset-password": {
        "$ref": "#/components/schemas/authn-flow2-restart-magiclink"
      },
      "authn-flow2-param-set-email": {
        "type": "object",
        "properties": {
          "required_for": {
            "$ref": "#/components/schemas/authn-auth-types"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-update-set-email": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/authn-email"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-restart-set-email": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-set-username": {
        "type": "object",
        "properties": {
          "required_for": {
            "$ref": "#/components/schemas/authn-auth-types"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-update-set-username": {
        "type": "object",
        "properties": {
          "username": {
            "$ref": "#/components/schemas/authn-username"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-restart-set-username": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-set-password": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "password_policy": {
            "$ref": "#/components/schemas/authn-password-policy"
          }
        },
        "required": ["enrollment", "password_policy"],
        "additionalProperties": false
      },
      "authn-flow2-update-set-password": {
        "type": "object",
        "properties": {
          "password": {
            "$ref": "#/components/schemas/authn-password"
          }
        },
        "required": ["password"],
        "additionalProperties": false
      },
      "authn-flow2-restart-set-password": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-set-phone": {
        "type": "object",
        "properties": {
          "required_for": {
            "$ref": "#/components/schemas/authn-auth-types"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-update-set-phone": {
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/authn-phone"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "authn-flow2-restart-set-phone": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-sms-otp": {
        "type": "object",
        "properties": {
          "sent": {
            "type": "boolean"
          },
          "enrollment": {
            "type": "boolean"
          },
          "resend_time": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "need_phone": {
            "type": "boolean"
          }
        },
        "required": ["sent", "enrollment"],
        "additionalProperties": false
      },
      "authn-flow2-update-sms-otp": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/authn-mfa-code"
          }
        },
        "required": ["code"],
        "additionalProperties": false
      },
      "authn-flow2-restart-sms-otp": {
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/authn-phone"
          }
        },
        "additionalProperties": false
      },
      "authn-flow2-param-social": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "social_provider": {
            "$ref": "#/components/schemas/authn-social-provider-id"
          },
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          },
          "redirect_uri": {
            "type": "string",
            "format": "http-url"
          }
        },
        "required": ["enrollment", "social_provider", "state", "redirect_uri"],
        "additionalProperties": false
      },
      "authn-flow2-update-social": {
        "type": "object",
        "properties": {
          "social_provider": {
            "$ref": "#/components/schemas/authn-social-provider-id"
          },
          "uri": {
            "type": "string",
            "format": "http-url"
          }
        },
        "required": ["social_provider", "uri"],
        "additionalProperties": false
      },
      "authn-flow2-param-saml": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "provider_id": {
            "$ref": "#/components/schemas/saml-sp-id"
          },
          "provider_name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/authn-callback-state"
          },
          "redirect_uri": {
            "type": "string",
            "format": "http-url"
          },
          "idp_init_flow": {
            "type": "boolean"
          }
        },
        "required": ["enrollment", "provider_id", "provider_name", "state"],
        "additionalProperties": false
      },
      "authn-flow2-update-saml": {
        "type": "object",
        "properties": {
          "provider_id": {
            "$ref": "#/components/schemas/saml-sp-id"
          },
          "provider_name": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "http-url"
          },
          "idp_flow_state": {
            "$ref": "#/components/schemas/authn-callback-state"
          }
        },
        "required": ["provider_id", "provider_name"],
        "additionalProperties": false
      },
      "authn-flow2-restart-saml": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-restart-social": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-totp": {
        "type": "object",
        "properties": {
          "enrollment": {
            "type": "boolean"
          },
          "totp_secret": {
            "$ref": "#/components/schemas/authn-mfa-totp-secret"
          }
        },
        "required": ["enrollment", "totp_secret"],
        "additionalProperties": false
      },
      "authn-flow2-update-totp": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/authn-mfa-code"
          }
        },
        "required": ["code"],
        "additionalProperties": false
      },
      "authn-flow2-restart-totp": {
        "$ref": "#/components/schemas/authn-empty"
      },
      "authn-flow2-param-verify-email": {
        "$ref": "#/components/schemas/authn-flow2-param-magiclink"
      },
      "authn-flow2-update-verify-email": {
        "$ref": "#/components/schemas/authn-flow2-update-magiclink"
      },
      "authn-flow2-restart-verify-email": {
        "$ref": "#/components/schemas/authn-flow2-restart-magiclink"
      },
      "authn-flow2-choice-enum": {
        "type": "string",
        "description": "Flow Choice",
        "enum": [
          "",
          "agreements",
          "captcha",
          "email_otp",
          "magiclink",
          "passkey",
          "password",
          "profile",
          "provisional_enrollment",
          "reset_password",
          "set_email",
          "set_username",
          "set_password",
          "set_phone",
          "sms_otp",
          "social",
          "totp",
          "verify_email",
          "saml",
          "oauth_consent"
        ],
        "examples": ["agreements"]
      },
      "authn-flow2-param-choice": {
        "type": "object",
        "properties": {
          "choice": {
            "$ref": "#/components/schemas/authn-flow2-choice-enum"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["choice", "data"],
        "additionalProperties": false,
        "anyOf": [
          {
            "title": "agreements",
            "properties": {
              "choice": {
                "const": "agreements"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-agreements"
              }
            }
          },
          {
            "title": "oauth_consent",
            "properties": {
              "choice": {
                "const": "oauth_consent"
              },
              "data": {
                "$ref": "#/components/schemas/authn-oauth-custom-scope"
              }
            }
          },
          {
            "title": "captcha",
            "properties": {
              "choice": {
                "const": "captcha"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-captcha"
              }
            }
          },
          {
            "title": "email_otp",
            "properties": {
              "choice": {
                "const": "email_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-email-otp"
              }
            }
          },
          {
            "title": "magiclink",
            "properties": {
              "choice": {
                "const": "magiclink"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-magiclink"
              }
            }
          },
          {
            "title": "passkey",
            "properties": {
              "choice": {
                "const": "passkey"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-passkey"
              }
            }
          },
          {
            "title": "password",
            "properties": {
              "choice": {
                "const": "password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-password"
              }
            }
          },
          {
            "title": "profile",
            "properties": {
              "choice": {
                "const": "profile"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-profile"
              }
            }
          },
          {
            "title": "provisional_enrollment",
            "properties": {
              "choice": {
                "const": "provisional_enrollment"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-provisional-enrollment"
              }
            }
          },
          {
            "title": "reset_password",
            "properties": {
              "choice": {
                "const": "reset_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-reset-password"
              }
            }
          },
          {
            "title": "set_email",
            "properties": {
              "choice": {
                "const": "set_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-set-email"
              }
            }
          },
          {
            "title": "set_username",
            "properties": {
              "choice": {
                "const": "set_username"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-set-username"
              }
            }
          },
          {
            "title": "set_password",
            "properties": {
              "choice": {
                "const": "set_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-set-password"
              }
            }
          },
          {
            "title": "set_phone",
            "properties": {
              "choice": {
                "const": "set_phone"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-set-phone"
              }
            }
          },
          {
            "title": "sms_otp",
            "properties": {
              "choice": {
                "const": "sms_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-sms-otp"
              }
            }
          },
          {
            "title": "social",
            "properties": {
              "choice": {
                "const": "social"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-social"
              }
            }
          },
          {
            "title": "totp",
            "properties": {
              "choice": {
                "const": "totp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-totp"
              }
            }
          },
          {
            "title": "verify_email",
            "properties": {
              "choice": {
                "const": "verify_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-verify-email"
              }
            }
          },
          {
            "title": "saml",
            "properties": {
              "choice": {
                "const": "saml"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-param-saml"
              }
            }
          }
        ]
      },
      "authn-flow2-restart": {
        "type": "object",
        "properties": {
          "flow_id": {
            "$ref": "#/components/schemas/authn-flow-id"
          },
          "choice": {
            "$ref": "#/components/schemas/authn-flow2-choice-enum"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["flow_id", "choice", "data"],
        "additionalProperties": false,
        "anyOf": [
          {
            "title": "agreements",
            "properties": {
              "choice": {
                "const": "agreements"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-agreements"
              }
            }
          },
          {
            "title": "oauth_consent",
            "properties": {
              "choice": {
                "const": "oauth_consent"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-oauth-consent"
              }
            }
          },
          {
            "title": "captcha",
            "properties": {
              "choice": {
                "const": "captcha"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-captcha"
              }
            }
          },
          {
            "title": "email_otp",
            "properties": {
              "choice": {
                "const": "email_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-email-otp"
              }
            }
          },
          {
            "title": "magiclink",
            "properties": {
              "choice": {
                "const": "magiclink"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-magiclink"
              }
            }
          },
          {
            "title": "passkey",
            "properties": {
              "choice": {
                "const": "passkey"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-passkey"
              }
            }
          },
          {
            "title": "password",
            "properties": {
              "choice": {
                "const": "password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-password"
              }
            }
          },
          {
            "title": "profile",
            "properties": {
              "choice": {
                "const": "profile"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-profile"
              }
            }
          },
          {
            "title": "provisional_enrollment",
            "properties": {
              "choice": {
                "const": "provisional_enrollment"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-provisional-enrollment"
              }
            }
          },
          {
            "title": "reset_password",
            "properties": {
              "choice": {
                "const": "reset_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-reset-password"
              }
            }
          },
          {
            "title": "set_email",
            "properties": {
              "choice": {
                "const": "set_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-set-email"
              }
            }
          },
          {
            "title": "set_username",
            "properties": {
              "choice": {
                "const": "set_username"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-set-username"
              }
            }
          },
          {
            "title": "set_password",
            "properties": {
              "choice": {
                "const": "set_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-set-password"
              }
            }
          },
          {
            "title": "set_phone",
            "properties": {
              "choice": {
                "const": "set_phone"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-set-phone"
              }
            }
          },
          {
            "title": "sms_otp",
            "properties": {
              "choice": {
                "const": "sms_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-sms-otp"
              }
            }
          },
          {
            "title": "social",
            "properties": {
              "choice": {
                "const": "social"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-social"
              }
            }
          },
          {
            "title": "saml",
            "properties": {
              "choice": {
                "const": "saml"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-saml"
              }
            }
          },
          {
            "title": "totp",
            "properties": {
              "choice": {
                "const": "totp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-totp"
              }
            }
          },
          {
            "title": "verify_email",
            "properties": {
              "choice": {
                "const": "verify_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-restart-verify-email"
              }
            }
          }
        ]
      },
      "authn-flow2-update": {
        "type": "object",
        "properties": {
          "flow_id": {
            "$ref": "#/components/schemas/authn-flow-id"
          },
          "choice": {
            "$ref": "#/components/schemas/authn-flow2-choice-enum"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["flow_id", "choice", "data"],
        "additionalProperties": false,
        "anyOf": [
          {
            "title": "empty",
            "properties": {
              "choice": {
                "const": ""
              }
            }
          },
          {
            "title": "agreements",
            "properties": {
              "choice": {
                "const": "agreements"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-agreements"
              }
            }
          },
          {
            "title": "oauth_consent",
            "properties": {
              "choice": {
                "const": "oauth_consent"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-oauth-consent"
              }
            }
          },
          {
            "title": "captcha",
            "properties": {
              "choice": {
                "const": "captcha"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-captcha"
              }
            }
          },
          {
            "title": "email_otp",
            "properties": {
              "choice": {
                "const": "email_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-email-otp"
              }
            }
          },
          {
            "title": "magiclink",
            "properties": {
              "choice": {
                "const": "magiclink"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-magiclink"
              }
            }
          },
          {
            "title": "passkey",
            "properties": {
              "choice": {
                "const": "passkey"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-passkey"
              }
            }
          },
          {
            "title": "password",
            "properties": {
              "choice": {
                "const": "password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-password"
              }
            }
          },
          {
            "title": "profile",
            "properties": {
              "choice": {
                "const": "profile"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-profile"
              }
            }
          },
          {
            "title": "provisional_enrollment",
            "properties": {
              "choice": {
                "const": "provisional_enrollment"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-provisional-enrollment"
              }
            }
          },
          {
            "title": "reset_password",
            "properties": {
              "choice": {
                "const": "reset_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-reset-password"
              }
            }
          },
          {
            "title": "set_email",
            "properties": {
              "choice": {
                "const": "set_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-set-email"
              }
            }
          },
          {
            "title": "set_username",
            "properties": {
              "choice": {
                "const": "set_username"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-set-username"
              }
            }
          },
          {
            "title": "set_password",
            "properties": {
              "choice": {
                "const": "set_password"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-set-password"
              }
            }
          },
          {
            "title": "set_phone",
            "properties": {
              "choice": {
                "const": "set_phone"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-set-phone"
              }
            }
          },
          {
            "title": "sms_otp",
            "properties": {
              "choice": {
                "const": "sms_otp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-sms-otp"
              }
            }
          },
          {
            "title": "social",
            "properties": {
              "choice": {
                "const": "social"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-social"
              }
            }
          },
          {
            "title": "saml",
            "properties": {
              "choice": {
                "const": "saml"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-saml"
              }
            }
          },
          {
            "title": "totp",
            "properties": {
              "choice": {
                "const": "totp"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-totp"
              }
            }
          },
          {
            "title": "verify_email",
            "properties": {
              "choice": {
                "const": "verify_email"
              },
              "data": {
                "$ref": "#/components/schemas/authn-flow2-update-verify-email"
              }
            }
          }
        ]
      },
      "authn-flow2-phase": {
        "type": "string",
        "description": "Signin/Signup Phase",
        "enum": [
          "phase_primary",
          "phase_captcha",
          "phase_profile",
          "phase_create_user",
          "phase_verify_email",
          "phase_set_password",
          "phase_secondary",
          "phase_agreements",
          "phase_oauth_consent",
          "phase_completed"
        ],
        "examples": ["phase_primary"]
      },
      "authn-flow2-choices": {
        "type": "object",
        "properties": {
          "flow_id": {
            "$ref": "#/components/schemas/authn-flow-id"
          },
          "flow_type": {
            "$ref": "#/components/schemas/authn-flow-types"
          },
          "email": {
            "$ref": "#/components/schemas/authn-email"
          },
          "disclaimer": {
            "type": "string"
          },
          "flow_phase": {
            "$ref": "#/components/schemas/authn-flow2-phase"
          },
          "flow_choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-flow2-param-choice"
            }
          }
        },
        "required": ["flow_id", "flow_type", "flow_phase", "flow_choices"],
        "additionalProperties": false
      },
      "saml-sp-id": {
        "type": "string",
        "description": "An ID for a saml sp",
        "pattern": "^pss_[a-z2-7]{32}$",
        "examples": ["pss_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "saml-service-provider": {
        "type": "object",
        "title": "SAML Service Provider Settings",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/saml-sp-id"
          },
          "enabled": {
            "title": "enabled",
            "type": "boolean",
            "description": "Flag indicating whether the SAML SP is enabled"
          },
          "name": {
            "title": "name",
            "type": "string"
          },
          "idp_sign_url": {
            "description": "URL for the Single Sign-On service endpoint.",
            "anyOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "maxLength": 0
              }
            ]
          },
          "idp_x509_certs": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "description": "SAML Provider server public key encoded in PEM or CER format"
          },
          "acs_uri": {
            "type": "string",
            "readOnly": true,
            "description": "Assertion Consumer Service URL. URL to which the IdP should send the SAML assertion. "
          },
          "metadata_uri": {
            "type": "string",
            "readOnly": true,
            "description": "Assertion Consumer Service URL. URL to which the IdP should send the SAML assertion. "
          },
          "auth_protocol_binding": {
            "$ref": "#/components/schemas/saml-protocol-binding"
          },
          "public_cert_pem": {
            "type": "string",
            "readOnly": true,
            "description": "Public X.509 certificate for the service provider in PEM format."
          },
          "private_key": {
            "type": "string",
            "readOnly": true,
            "description": "Encrypted Private X.509 certificate"
          },
          "public_cert_cer": {
            "type": "string",
            "readOnly": true,
            "description": "Public X.509 certificate for the service provider in CER format."
          },
          "sign_auth_request": {
            "type": "boolean",
            "description": "Flag indicating whether the SAML auth request should be signed"
          },
          "sign_request_algorithm": {
            "$ref": "#/components/schemas/saml-sign-algo"
          },
          "sign_request_algorithm_digest": {
            "$ref": "#/components/schemas/saml-sign-algo-digest"
          },
          "domain_list": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            }
          },
          "email_id_attribute": {
            "type": "string",
            "example": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
          },
          "idp_meta_data_url": {
            "type": "string",
            "format": "uri",
            "description": "URL for the Single Sign-On Identity Meta Data endpoint."
          },
          "idp_entity_id": {
            "type": "string",
            "description": "Unique identifier of the IdP that issued SAML assertion"
          },
          "idp_init_sso": {
            "type": "boolean",
            "default": false,
            "description": "Flag to enable IdP-Init Single Sign on"
          }
        },
        "additionalProperties": false
      },
      "saml-protocol-binding": {
        "type": "string",
        "description": "SAML Assertion Binding",
        "enum": ["HTTP-Redirect", "HTTP-POST"],
        "default": "HTTP-POST"
      },
      "saml-sign-algo": {
        "type": "string",
        "description": "SAML Sign Algorithms",
        "enum": ["RSA-SHA1", "RSA-SHA256", "RSA-SHA512"],
        "default": "RSA-SHA256"
      },
      "saml-sign-algo-digest": {
        "type": "string",
        "description": "SAML Sign Algorithm Digest",
        "enum": ["SHA1", "SHA256", "SHA512"],
        "default": "SHA256"
      },
      "user-import-source-upload": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/user-import-source-id"
          },
          "source_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user-import-source-field"
            }
          },
          "pangea_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user-import-pangea-field"
            }
          },
          "password_hash_algorithms": {
            "type": "array",
            "description": "List of supported password hashing algorithms",
            "items": {
              "$ref": "#/components/schemas/user-import-password-hash-algo"
            }
          }
        }
      },
      "user-import-source-id": {
        "type": "string",
        "description": "An ID for a user import source id",
        "pattern": "^pus_[a-z2-7]{32}$",
        "examples": ["pus_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "user-import-pangea-field": {
        "description": "Pangea field and its properties",
        "type": "object",
        "properties": {
          "pangea_field_name": {
            "type": "string",
            "description": "The corresponding name of the field in Pangea"
          },
          "pangea_field_type": {
            "type": "string",
            "description": "The accepted data types of the field in Pangea",
            "enum": [
              "string",
              "int",
              "float",
              "bool",
              "date",
              "datetime",
              "email",
              "phone"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Indicates if the field is required"
          },
          "is_profile_field": {
            "type": "boolean",
            "description": "Indicates if the field is profile or not"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user-import-field-tag"
            }
          },
          "password_hash_params": {
            "$ref": "#/components/schemas/user-import-password-hash-params"
          }
        },
        "required": ["pangea_field_name", "pangea_field_type"]
      },
      "user-import-source-field": {
        "description": "Schema for source field and type",
        "type": "object",
        "properties": {
          "source_field_name": {
            "type": "string",
            "description": "The name of the field in the source system"
          },
          "source_field_type": {
            "type": "string",
            "description": "The data type of the field in the source system",
            "enum": ["string", "int", "float", "bool", "date", "datetime"]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user-import-field-tag"
            }
          }
        },
        "required": ["source_field_name", "source_field_type"]
      },
      "user-import-field-tag": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["key", "value"],
        "additionalProperties": false
      },
      "user-import-field-mappings": {
        "description": "Schema for mapping source fields to Pangea fields",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/user-import-field-mapping"
        }
      },
      "user-import-field-mapping": {
        "description": "Schema for mapping one source to Pangea field",
        "type": "object",
        "properties": {
          "source_field": {
            "$ref": "#/components/schemas/user-import-source-field"
          },
          "pangea_field": {
            "$ref": "#/components/schemas/user-import-pangea-field"
          }
        },
        "required": ["source_field", "pangea_field"]
      },
      "user-import-id": {
        "type": "string",
        "description": "An ID for a user import id",
        "pattern": "^pum_[a-z2-7]{32}$",
        "examples": ["pum_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "user-import-status": {
        "description": "User import status",
        "type": "string",
        "enum": ["failed", "success", "pending"]
      },
      "user-import-password-hash-params": {
        "type": "object",
        "properties": {
          "iterations": {
            "type": "integer",
            "format": "uint32",
            "maximum": 1500000,
            "description": "The number of iterations over the memory."
          },
          "salt": {
            "type": "string",
            "description": "Salt"
          },
          "salt_order": {
            "type": "string",
            "description": "Order in which salt is applied",
            "enum": ["suffix", "prefix"]
          },
          "key_length": {
            "type": "integer",
            "description": "Length of the generated key."
          },
          "digest_algorithm": {
            "$ref": "#/components/schemas/user-import-password-hash-digest-algorithm-params"
          },
          "memory": {
            "type": "integer",
            "format": "uint32",
            "maximum": 65536,
            "description": "The amount of memory (in KB) used by the algorithm."
          },
          "parallelism": {
            "type": "integer",
            "format": "uint8",
            "maximum": 4,
            "description": "The number of threads used by the algorithm."
          },
          "block_size": {
            "type": "integer",
            "format": "int",
            "maximum": 8,
            "description": "scrypt block size parameter"
          },
          "cost_factor": {
            "type": "integer",
            "format": "int",
            "description": "scrypt CPU/memory cost parameter. Must be a power of 2"
          },
          "salt_separator": {
            "type": "string",
            "description": "base64 encoded salt separator required for firebase scrypt algorithm"
          },
          "signer_key": {
            "type": "string",
            "description": "base64 encoded private key which is required for firebase scrypt algorithm"
          },
          "algorithm": {
            "$ref": "#/components/schemas/user-import-password-hash-algo"
          }
        },
        "required": ["algorithm"]
      },
      "user-import-password-hash-algo": {
        "type": "string",
        "description": "type of hashing algorithm",
        "enum": [
          "MD5",
          "SHA1",
          "SHA256",
          "SHA512",
          "BCRYPT",
          "PBKDF2",
          "ARGON2",
          "SCRYPT",
          "FIREBASE-SCRYPT"
        ]
      },
      "user-import-password-hash-salt-order-params": {
        "type": "string",
        "description": "Order in which salt is applied",
        "enum": ["suffix", "prefix"]
      },
      "user-import-password-hash-digest-algorithm-params": {
        "type": "string",
        "description": "Algorithm used to generate the key.",
        "enum": ["SHA1", "SHA256", "SHA512"]
      },
      "user-import-endpoint": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Display name",
            "type": "string"
          },
          "source_id": {
            "$ref": "#/components/schemas/user-import-source-id"
          },
          "field_mappings": {
            "$ref": "#/components/schemas/user-import-field-mappings"
          }
        },
        "required": ["name", "source_id", "field_mappings"],
        "additionalProperties": false,
        "examples": [
          {
            "source_id": "pus_ls3nhhlt2qm7gpzejkbm6jqfrfx6yiqs",
            "name": "test1",
            "field_mappings": [
              {
                "source_field": {
                  "source_field_name": "email",
                  "source_field_type": "string"
                },
                "pangea_field": {
                  "pangea_field_name": "email",
                  "pangea_field_type": "string",
                  "required": true
                }
              }
            ]
          }
        ]
      },
      "authn-oauth-client-token-auth": {
        "type": "string",
        "description": "The authentication method for the token endpoint.",
        "enum": ["client_secret_basic", "client_secret_post"]
      },
      "authn-oauth-client-redirect-uris": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uri"
        },
        "description": "A list of allowed redirect URIs for the client."
      },
      "authn-oauth-client-grant-types": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": ["client_credentials", "authorization_code"]
        },
        "description": "A list of OAuth grant types that the client can use."
      },
      "authn-oauth-client-type": {
        "type": "string",
        "description": "A client type"
      },
      "authn-oauth-client-secret": {
        "description": "An ID for a client account",
        "pattern": "^pck_[a-z2-7]{32}$",
        "examples": ["pck_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-oauth-client-full-info": {
        "type": "object",
        "description": "OAuth client full information",
        "allOf": [
          {
            "$ref": "#/components/schemas/authn-oauth-client-info"
          },
          {
            "properties": {
              "client_secret": {
                "$ref": "#/components/schemas/authn-oauth-client-secret"
              },
              "client_secret_expires_at": {
                "$ref": "#/components/schemas/authn-timestamp"
              },
              "client_secret_name": {
                "type": "string"
              },
              "client_secret_description": {
                "type": "string"
              },
              "client_secret_metadata": {
                "$ref": "#/components/schemas/authn-oauth-client-secret-metadata"
              }
            },
            "required": ["client_secret", "client_secret_expires_at"]
          }
        ]
      },
      "authn-oauth-client-info": {
        "type": "object",
        "description": "OAuth client information",
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "client_name": {
            "type": "string"
          },
          "client_type": {
            "$ref": "#/components/schemas/authn-oauth-client-type"
          },
          "scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          },
          "default_scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/authn-oauth-client-token-auth"
          },
          "redirect_uris": {
            "$ref": "#/components/schemas/authn-oauth-client-redirect-uris"
          },
          "grant_types": {
            "$ref": "#/components/schemas/authn-oauth-client-grant-types"
          },
          "response_types": {
            "$ref": "#/components/schemas/authn-oauth-client-response-types"
          },
          "client_token_expires_in": {
            "$ref": "#/components/schemas/authn-duration-seconds-nullable"
          }
        },
        "required": [
          "client_id",
          "created_at",
          "updated_at",
          "client_name",
          "redirect_uris",
          "grant_types"
        ],
        "additionalProperties": false,
        "examples": [
          {
            "client_id": "psa_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a",
            "created_at": "2022-11-21T21:21:40.258033Z",
            "updated_at": "2022-11-21T21:21:40.258033Z",
            "client_name": "My OAuth Client",
            "client_type": "service account",
            "scope": "scope1 scope2 scope3",
            "grant_types": ["client_credentials"],
            "redirect_uris": ["/v1/redirect1", "/v2/redirect2"]
          }
        ]
      },
      "authn-filter-oauth-clients": {
        "additionalProperties": false,
        "description": "Search filter for clients.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "scopes": {
                "description": "A list of scopes that all must be present.",
                "items": {
                  "description": "Scopes",
                  "type": "string"
                },
                "type": "array"
              },
              "default_scopes": {
                "description": "A list of default scopes that all must be present.",
                "items": {
                  "description": "Default scopes",
                  "type": "string"
                },
                "type": "array"
              },
              "token_type": {
                "description": "Only records where token_type equals this value.",
                "nullable": false,
                "type": "string"
              },
              "token_type__contains": {
                "description": "Only records where token_type includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "token_type__in": {
                "description": "Only records where token_type equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": ["id", "created_at", "updated_at", "name", "token_type"],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-oauth-client-response-types": {
        "type": ["array", "null"],
        "items": {
          "type": ["string", "null"],
          "enum": ["code", "token", "id_token"]
        },
        "description": "A list of OAuth response types that the client can use."
      },
      "authn-oauth-custom-scope": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/authn-template-scope"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "is_system": {
            "type": "boolean",
            "default": false
          },
          "is_consent_required": {
            "type": "boolean",
            "default": false
          }
        },
        "required": ["name"],
        "additionalProperties": false,
        "examples": [
          {
            "name": "custom:scope1",
            "description": "testing custom scope name"
          }
        ]
      },
      "authn-filter-oauth-custom-scopes": {
        "additionalProperties": false,
        "description": "Search filter for oauth custom scopes.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "updated_at",
              "name",
              "owner",
              "token_type"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-clientsecret-id": {
        "type": "string",
        "description": "An ID for a oauth client secret id",
        "pattern": "^pce_[a-z2-7]{32}$",
        "examples": ["pce_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "authn-filter-oauth-client-secrets": {
        "additionalProperties": false,
        "description": "Search filter for client secrets.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "client_secret_id": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "client_secret_id__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "client_secret_id__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "client_secret_name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "client_secret_name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "client_secret_name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "client_secret_expires_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "client_secret_expires_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "client_secret_expires_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "client_secret_expires_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "client_secret_expires_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "updated_at",
              "client_secret_expires_at",
              "client_secret_id"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-oauth-client-secret-full-info": {
        "type": "object",
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "client_secret_id": {
            "$ref": "#/components/schemas/authn-clientsecret-id"
          },
          "client_secret": {
            "$ref": "#/components/schemas/authn-oauth-client-secret"
          },
          "client_secret_expires_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "client_secret_name": {
            "type": "string"
          },
          "client_secret_description": {
            "type": "string"
          },
          "client_secret_metadata": {
            "$ref": "#/components/schemas/authn-oauth-client-secret-metadata"
          }
        },
        "required": [
          "client_id",
          "client_secret_id",
          "client_secret",
          "client_secret_expires_at"
        ]
      },
      "authn-oauth-client-secret-metadata": {
        "type": "object",
        "patternProperties": {
          ".*": {
            "type": "string"
          }
        }
      },
      "authn-oauth-client-secret-meta-info": {
        "type": "object",
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "client_secret_id": {
            "$ref": "#/components/schemas/authn-clientsecret-id"
          },
          "client_secret_expires_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "client_secret_name": {
            "type": "string"
          },
          "client_secret_description": {
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "client_secret_metadata": {
            "$ref": "#/components/schemas/authn-oauth-client-secret-metadata"
          }
        },
        "required": [
          "client_id",
          "client_secret_id",
          "client_secret_expires_at"
        ]
      },
      "authn-oauth-user-consent": {
        "type": "object",
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "user_id": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          }
        },
        "oneOf": [
          {
            "required": ["client_id", "user_id"]
          },
          {
            "required": ["client_id", "flow_id"]
          }
        ]
      },
      "authn-oauth-user-consent-request-response": {
        "type": "object",
        "properties": {
          "is_consent_required": {
            "type": "boolean"
          },
          "client_id": {
            "$ref": "#/components/schemas/authn-serviceaccount-id"
          },
          "user_id": {
            "$ref": "#/components/schemas/authn-identity"
          },
          "consent_required_scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authn-oauth-custom-scope"
            }
          }
        },
        "required": ["is_consent_required"]
      },
      "authn-oauth-error": {
        "type": "object",
        "description": "oauth validation error",
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          },
          "error_uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "authn-oauth-client-secret-life": {
        "type": ["integer", "null"],
        "description": "A positive time duration in seconds or null",
        "maximum": 31536000
      },
      "authn-oauth-user-consent-scope-selection": {
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          },
          "is_allowed": {
            "type": "boolean"
          }
        }
      },
      "authn-oauth-claim-id": {
        "type": "string",
        "pattern": "^pcm_[a-z2-7]{32}$",
        "examples": ["pcm_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"],
        "description": "An OAuth Claim ID"
      },
      "authn-oauth-claim-name": {
        "type": "string",
        "description": "A simple alphanumeric, token-friendly key that is sortable.",
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "authn-oauth-claim-value": {
        "type": "string",
        "pattern": "^profile.[a-zA-Z0-9_-]+$",
        "description": "A profile field name",
        "examples": ["profile.first_name"]
      },
      "authn-oauth-claim-info": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-oauth-claim-id"
          },
          "name": {
            "$ref": "#/components/schemas/authn-oauth-claim-name"
          },
          "value": {
            "type": "string",
            "description": "A string or expression that shows the value currently mapped to this claim"
          },
          "scope": {
            "$ref": "#/components/schemas/authn-oauth-scope"
          },
          "tokens": {
            "type": "array",
            "description": "This will show either id_token, access token, or both.",
            "items": {
              "type": "string",
              "enum": ["id_token", "access_token"]
            }
          }
        }
      },
      "authn-filter-oauth-claim": {
        "additionalProperties": false,
        "description": "Search filter for oauth claims.",
        "properties": {
          "filter": {
            "patternProperties": {},
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": [
              "id",
              "created_at",
              "updated_at",
              "name",
              "owner",
              "token_type"
            ],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-token-claims": {
        "type": "object",
        "description": "claim object in the token"
      },
      "authn-paginate": {
        "type": "object",
        "properties": {
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "authn-user-id": {
        "type": "string",
        "description": "An ID for a user",
        "pattern": "^pui_[a-z2-7]{32}$"
      },
      "authn-group-id": {
        "type": "string",
        "description": "An ID for a group",
        "pattern": "^pgi_[a-z2-7]{32}$",
        "examples": ["pgi_rqo2uwlhgxy5gqpfgxjomccovphnfjo6"]
      },
      "authn-group-name": {
        "type": "string",
        "description": "A name for a group",
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "authn-group-attributes": {
        "type": "object",
        "description": "A collection of key/value pairs",
        "patternProperties": {
          ".*": {
            "type": "string"
          }
        },
        "examples": [
          {
            "source": "ACME Directory",
            "import_date": "05/22/2021"
          }
        ]
      },
      "authn-filter-groups": {
        "additionalProperties": false,
        "description": "Search filter for groups.",
        "properties": {
          "filter": {
            "properties": {
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__contains": {
                "description": "Only records where created_at includes this value.",
                "type": "string"
              },
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Only records where name equals this value.",
                "nullable": false,
                "type": "string"
              },
              "name__contains": {
                "description": "Only records where name includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "name__in": {
                "description": "Only records where name equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "description": "Only records where type equals this value.",
                "nullable": false,
                "type": "string"
              },
              "type__contains": {
                "description": "Only records where type includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "type__in": {
                "description": "Only records where type equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__contains": {
                "description": "Only records where updated_at includes this value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": ["id", "created_at", "updated_at", "name", "type"],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "authn-group-info": {
        "type": "object",
        "description": "A group and its information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authn-group-id"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/authn-group-attributes"
          },
          "created_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/authn-timestamp"
          }
        },
        "required": ["id", "name", "type"],
        "additionalProperties": false
      },
      "authn-group-list": {
        "type": "array",
        "description": "A list of groups and their information",
        "items": {
          "$ref": "#/components/schemas/authn-group-info"
        },
        "examples": [
          [
            {
              "id": "pgi_mhotohiowr2zubwxofp2vdxiojahzqpg",
              "name": "Console Users",
              "description": "Users with access to Console",
              "type": "imported",
              "attributes": {
                "imported_at": "2022-11-22T01:28:30.824144Z"
              },
              "created_at": "2022-11-22T01:28:30.824144Z",
              "updated_at": "2022-11-22T01:28:30.824144Z"
            }
          ]
        ]
      },
      "authn-group-user-list": {
        "type": "array",
        "description": "A list of users and their information",
        "items": {
          "$ref": "#/components/schemas/authn-v2-user-info"
        }
      }
    },
    "securitySchemes": {
      "APIToken": {
        "type": "http",
        "bearerFormat": "token",
        "description": "Pangea API Token",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "authn",
      "description": "Secure login and user management"
    },
    {
      "name": "v2-flow",
      "description": "Sign-Up/In Flow"
    },
    {
      "name": "v2-session-management",
      "description": "Session Management"
    },
    {
      "name": "v2-user-management",
      "description": "User Management"
    },
    {
      "name": "v2-invites",
      "description": "Invites"
    },
    {
      "name": "v2-jwt",
      "description": "JWT"
    },
    {
      "name": "v2-agreements-management",
      "description": "Agreement Management"
    },
    {
      "name": "v2-groups",
      "description": "Groups"
    }
  ]
}
