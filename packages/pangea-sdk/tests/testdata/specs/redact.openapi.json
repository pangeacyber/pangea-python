{
  "info": {
    "title": "redact",
    "description": "Remove sensitive info from a string",
    "version": "1",
    "contact": {
      "name": "Pangea",
      "url": "https://pangea.cloud/docs/support",
      "email": "support@pangea.cloud"
    }
  },
  "servers": [
    {
      "url": "https://redact.aws.us.pangea.cloud",
      "description": "Pangea regional service cluster"
    },
    {
      "url": "https://redact.aws.us-east.pangea.cloud",
      "description": "Pangea regional service cluster"
    },
    {
      "url": "https://redact.aws.us-west-2.pangea.cloud",
      "description": "Pangea regional service cluster"
    },
    {
      "url": "https://redact.aws.eu.pangea.cloud",
      "description": "Pangea regional service cluster"
    }
  ],
  "paths": {
    "/v1/redact": {
      "post": {
        "operationId": "redact_post_v1_redact",
        "summary": "Redact text",
        "description": "Redact sensitive information from provided text.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "docs_anchor": "/v1/redact",
                "type": "object",
                "required": ["text"],
                "additionalProperties": false,
                "properties": {
                  "config_id": {
                    "type": "string",
                    "description": "Config ID. Can be found at the top of the [Redact dashboard](https://console.pangea.cloud/service/redact)."
                  },
                  "text": {
                    "type": "string",
                    "example": "My name is Dennis Nedry and my email is you.didnt.say.the.magic.word@gmail.com",
                    "description": "The text data to redact"
                  },
                  "return_result": {
                    "type": "boolean",
                    "description": "Setting this value to false will omit the redacted result only returning count"
                  },
                  "debug": {
                    "type": "boolean",
                    "default": false,
                    "description": "Setting this value to true will provide a detailed analysis of the redacted data and the rules that caused redaction"
                  },
                  "rules": {
                    "$ref": "#/components/schemas/rules-param"
                  },
                  "rulesets": {
                    "$ref": "#/components/schemas/rulesets-param"
                  },
                  "redaction_method_overrides": {
                    "$ref": "#/components/schemas/redaction-method-overrides"
                  },
                  "vault_parameters": {
                    "$ref": "#/components/schemas/vault-params"
                  },
                  "llm_request": {
                    "type": "boolean",
                    "default": false,
                    "description": "Is this redact call going to be used in an LLM request?"
                  }
                },
                "examples": [
                  {
                    "text": "My phone number is: 555-555-5555",
                    "debug": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The redacted text",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "required": ["count"],
                          "properties": {
                            "redacted_text": {
                              "type": "string",
                              "description": "The redacted text",
                              "example": "My phone number is: <PHONE_NUMBER>"
                            },
                            "count": {
                              "type": "integer",
                              "description": "Number of redactions present in the text"
                            },
                            "report": {
                              "$ref": "#/components/schemas/redact-debug-report"
                            },
                            "fpe_context": {
                              "$ref": "#/components/schemas/fpe-context"
                            }
                          },
                          "examples": [
                            {
                              "redacted_text": "Call Jenny at <PHONE_NUMBER>",
                              "count": 1
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact"]
      }
    },
    "/v1/redact_structured": {
      "post": {
        "operationId": "redact_post_v1_redact_structured",
        "summary": "Redact structured JSON",
        "description": "Redact sensitive information from structured data (e.g., JSON).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "docs_anchor": "/v1/redact_structured",
                "type": "object",
                "required": ["data"],
                "additionalProperties": false,
                "properties": {
                  "config_id": {
                    "type": "string",
                    "description": "Config ID. Can be found at the top of the [Redact dashboard](https://console.pangea.cloud/service/redact)."
                  },
                  "data": {
                    "description": "Structured data to redact"
                  },
                  "jsonp": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "required": ["path"],
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "rules": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "required": ["rule"],
                                    "$ref": "#/components/schemas/redact-redaction",
                                    "properties": {
                                      "rule": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "description": "JSON path(s) used to identify the specific JSON fields to redact in the structured data. Note: If jsonp parameter is used, the data parameter must be in JSON format."
                  },
                  "format": {
                    "type": "string",
                    "enum": ["json"],
                    "default": "json",
                    "description": "The format of the structured data to redact"
                  },
                  "return_result": {
                    "type": "boolean",
                    "description": "Setting this value to false will omit the redacted result only returning count"
                  },
                  "debug": {
                    "type": "boolean",
                    "default": false,
                    "description": "Setting this value to true will provide a detailed analysis of the redacted data and the rules that caused redaction"
                  },
                  "rules": {
                    "$ref": "#/components/schemas/rules-param"
                  },
                  "rulesets": {
                    "$ref": "#/components/schemas/rulesets-param"
                  },
                  "redaction_method_overrides": {
                    "$ref": "#/components/schemas/redaction-method-overrides"
                  },
                  "vault_parameters": {
                    "$ref": "#/components/schemas/vault-params"
                  },
                  "llm_request": {
                    "type": "boolean",
                    "default": false,
                    "description": "Is this redact call going to be used in an LLM request?"
                  }
                },
                "examples": [
                  {
                    "data": {
                      "one": {
                        "secret": "(555)-555-5555"
                      },
                      "two": {
                        "secret": "CC: 5555555555554444"
                      },
                      "three": {
                        "secret": "baz"
                      }
                    },
                    "jsonp": ["$.*.secret"],
                    "debug": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data with redactions in-place",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "required": ["count"],
                          "properties": {
                            "redacted_data": {
                              "description": "The redacted data"
                            },
                            "count": {
                              "type": "integer",
                              "description": "Number of redactions present in the data"
                            },
                            "report": {
                              "$ref": "#/components/schemas/redact-debug-report"
                            },
                            "fpe_context": {
                              "$ref": "#/components/schemas/fpe-context"
                            }
                          },
                          "examples": [
                            {
                              "redacted_data": {
                                "telephone": "<PHONE_NUMBER>",
                                "ssn": "<US_SSN>"
                              },
                              "count": 2
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact"]
      }
    },
    "/v1beta/config": {
      "post": {
        "operationId": "redact_post_v1beta_config",
        "summary": "Get Redact config",
        "description": "Retrieve a Redact service configuration by its ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/redact-service-config-id"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redact service configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/redact-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact", "config-management"]
      }
    },
    "/v1beta/config/create": {
      "post": {
        "operationId": "redact_post_v1beta_config_create",
        "summary": "Create Redact config",
        "description": "Create a new Redact service configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "docs_anchor": "rulesets",
                "required": ["name"],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/redact-service-config-name"
                  },
                  "version": {
                    "$ref": "#/components/schemas/redact-service-config-version"
                  },
                  "enabled_rules": {
                    "$ref": "#/components/schemas/redact-service-config-enabled_rules"
                  },
                  "enforce_enabled_rules": {
                    "$ref": "#/components/schemas/redact-service-config-enforce_enabled_rules"
                  },
                  "redactions": {
                    "$ref": "#/components/schemas/redact-service-config-redactions"
                  },
                  "vault_service_config_id": {
                    "$ref": "#/components/schemas/redact-service-config-vault_service_config_id"
                  },
                  "salt_vault_secret_id": {
                    "$ref": "#/components/schemas/redact-service-config-salt_vault_secret_id"
                  },
                  "fpe_vault_secret_id": {
                    "$ref": "#/components/schemas/redact-service-config-fpe_vault_secret_id"
                  },
                  "rules": {
                    "$ref": "#/components/schemas/redact-service-config-rules"
                  },
                  "rulesets": {
                    "$ref": "#/components/schemas/redact-service-config-rulesets"
                  },
                  "supported_languages": {
                    "$ref": "#/components/schemas/redact-service-config-supported_languages"
                  }
                },
                "not": {
                  "required": ["id"],
                  "description": "Creating a config does not accept an ID"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a Redact service config",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/redact-service-config"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact", "config-management"]
      }
    },
    "/v1beta/config/update": {
      "post": {
        "operationId": "redact_post_v1beta_config_update",
        "summary": "Update Redact config",
        "description": "Update a Redact service configuration.\n\nTo update a configuration, first retrieve the current version, apply your changes, and submit the updated configuration to this endpoint.\n\nFor a full example using a Project Admin management client, see the [Service Configuration APIs](https://pangea.cloud/docs/admin-guide/projects/credentials#service-configuration-apis) documentation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["name", "id", "updated_at"],
                "docs_anchor": "rulesets",
                "$ref": "#/components/schemas/redact-service-config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redact service configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/redact-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact", "config-management"]
      }
    },
    "/v1beta/config/delete": {
      "post": {
        "operationId": "redact_post_v1beta_config_delete",
        "summary": "Delete redact config (Beta)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "docs_anchor": "rulesets",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/redact-service-config-id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redact service config successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/redact-service-config-result"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact", "config-management"]
      }
    },
    "/v1beta/config/list": {
      "post": {
        "operationId": "redact_post_v1beta_config_list",
        "summary": "List Redact configs",
        "description": "Retrieve a paginated list of Redact service configurations.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/redact-service-config-list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "count": {
                              "description": "Number of service configs matched by the list request",
                              "type": "integer"
                            },
                            "last": {
                              "description": "Base64-encoded pagination cursor from the previous response, used to retrieve the next page of results",
                              "type": "string",
                              "examples": ["MTox"]
                            },
                            "items": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/redact-service-config"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "description": "No description provided"
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact", "config-management"]
      }
    },
    "/v1/unredact": {
      "post": {
        "operationId": "redact_post_v1_unredact",
        "summary": "Unredact text or structured JSON",
        "description": "Decrypt or unredact fpe redactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "docs_anchor": "/v1/unredact",
                "type": "object",
                "required": ["redacted_data", "fpe_context"],
                "additionalProperties": false,
                "properties": {
                  "config_id": {
                    "type": "string",
                    "description": "Config ID. Can be found at the top of the [Redact dashboard](https://console.pangea.cloud/service/redact)."
                  },
                  "redacted_data": {
                    "description": "Data to unredact"
                  },
                  "fpe_context": {
                    "type": "string",
                    "format": "base64",
                    "description": "FPE context used to decrypt and unredact data"
                  }
                },
                "examples": [
                  {
                    "redacted_data": {
                      "telephone": "<PHONE_NUMBER>",
                      "ssn": "<US_SSN>"
                    },
                    "fpe_context": "gAyHpblmIoUXKTiYY8xKiQ=="
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The unredacted data",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "required": ["data"],
                          "properties": {
                            "data": {
                              "description": "The unredacted data"
                            }
                          },
                          "examples": [
                            {
                              "data": {
                                "telephone": "(555)-555-5555",
                                "ssn": "457-55-5462"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact"]
      }
    },
    "/v1/unredact_events": {
      "post": {
        "operationId": "redact_post_v1_unredact_events",
        "summary": "Unredact FPE events",
        "description": "Unredacts a list of secure audit log events redacted with FPE (Format Preserving Encryption)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["events"],
                "properties": {
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["envelope"],
                      "properties": {
                        "envelope": {
                          "type": "object",
                          "properties": {
                            "event": {
                              "type": "object"
                            }
                          }
                        },
                        "fpe_context": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "events": {
                              "type": "object",
                              "required": ["envelope"],
                              "properties": {
                                "envelope": {
                                  "type": "object",
                                  "properties": {
                                    "event": {
                                      "type": "object"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "description": "No description provided"
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "$ref": "#/components/schemas/pangea-validation-errors"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["redact"]
      }
    },
    "/request/{requestId}": {
      "get": {
        "operationId": "get_async_request",
        "summary": "Get an asynchronous request",
        "description": "Will retrieve the result, or will return 202 if the original request is still in progress",
        "tags": ["redact"],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The request ID to poll",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Asynchronous request in progress",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pangea-response"
                    },
                    {
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "ttl_mins": {
                              "type": "integer"
                            },
                            "retry_counter": {
                              "type": "integer"
                            },
                            "location": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pangea-response"
                }
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.1.0",
  "components": {
    "schemas": {
      "pangea-response": {
        "title": "Response Schema",
        "description": "Pangea standard response schema",
        "type": "object",
        "required": ["request_id", "request_time", "response_time", "status"],
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A unique identifier assigned to each request made to the API. It is used to track and identify a specific request and its associated data. The `request_id` can be helpful for troubleshooting, auditing, and tracing the flow of requests within the system. It allows users to reference and retrieve information related to a particular request, such as the response, parameters, and raw data associated with that specific request.\n\n```\n\"request_id\":\"prq_x6fdiizbon6j3bsdvnpmwxsz2aan7fqd\"\n```"
          },
          "request_time": {
            "type": "string",
            "description": "The timestamp indicates the exact moment when a request is made to the API. It represents the date and time at which the request was initiated by the client. The `request_time` is useful for tracking and analyzing the timing of requests, measuring response times, and monitoring performance metrics. It allows users to determine the duration between the request initiation and the corresponding response, aiding in the assessment of API performance and latency.\n\n```\n\"request_time\":\"2022-09-21T17:24:33.105Z\"\n```",
            "format": "date-time"
          },
          "response_time": {
            "type": "string",
            "description": "Duration it takes for the API to process a request and generate a response. It represents the elapsed time from when the request is received by the API to when the corresponding response is returned to the client.\n\n```\n\"response_time\":\"2022-09-21T17:24:34.007Z\"\n```",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": ["Success"],
            "description": "It represents the status or outcome of the API request made for IP information. It indicates the current state or condition of the request and provides information on the success or failure of the request.\n\n```\n\"status\":\"success\"\n```"
          },
          "summary": {
            "type": "string",
            "description": "Provides a concise and brief overview of the purpose or primary objective of the API endpoint. It serves as a high-level summary or description of the functionality or feature offered by the endpoint."
          },
          "result": {
            "type": "object"
          }
        },
        "examples": [
          {
            "request_id": "prq_x6fdiizbon6j3bsdvnpmwxsz2aan7fqd",
            "request_time": "2022-09-21T17:24:33.105Z",
            "response_time": "2022-09-21T17:24:34.007Z",
            "status": "success"
          }
        ]
      },
      "pangea-validation-errors": {
        "$ref": "#/components/schemas/pangea-response",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "object",
            "required": ["errors"],
            "properties": {
              "errors": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": ["code", "detail", "source"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "FieldRequired",
                        "InvalidString",
                        "InvalidNumber",
                        "InvalidInteger",
                        "InvalidObject",
                        "InvalidArray",
                        "InvalidNull",
                        "InvalidBool",
                        "BadFormat",
                        "BadFormatPangeaDuration",
                        "BadFormatDateTime",
                        "BadFormatTime",
                        "BadFormatDate",
                        "BadFormatEmail",
                        "BadFormatHostname",
                        "BadFormatIPv4",
                        "BadFormatIPv6",
                        "BadFormatIPAddress",
                        "BadFormatUUID",
                        "BadFormatURI",
                        "BadFormatURIReference",
                        "BadFormatIRI",
                        "BadFormatIRIReference",
                        "BadFormatJSONPointer",
                        "BadFormatRelativeJSONPointer",
                        "BadFormatRegex",
                        "BadFormatJSONPath",
                        "BadFormatBase64",
                        "DoesNotMatchPattern",
                        "DoesNotMatchPatternProperties",
                        "NotEnumMember",
                        "AboveMaxLength",
                        "BelowMinLength",
                        "AboveMaxItems",
                        "BelowMinItems",
                        "NotMultipleOf",
                        "NotWithinRange",
                        "UnexpectedProperty",
                        "InvalidPropertyName",
                        "AboveMaxProperties",
                        "BelowMinProperties",
                        "NotContains",
                        "ContainsTooMany",
                        "ContainsTooFew",
                        "ItemNotUnique",
                        "UnexpectedAdditionalItem",
                        "InvalidConst",
                        "IsDependentOn",
                        "IsTooBig",
                        "IsTooSmall",
                        "ShouldNotBeValid",
                        "NoUnevaluatedItems",
                        "NoUnevaluatedProperties",
                        "DoesNotExist",
                        "IsReadOnly",
                        "CannotAddToDefault",
                        "MustProvideOne",
                        "MutuallyExclusive",
                        "BadState",
                        "InaccessibleURI",
                        "ProviderDisabled",
                        "ConfigProjectMismatch",
                        "ConfigServiceMismatch",
                        "ConfigNotExist"
                      ]
                    },
                    "detail": {
                      "type": "string",
                      "description": "Human readable description of the error"
                    },
                    "source": {
                      "type": "string",
                      "description": "Path to the data source of the error",
                      "format": "json-pointer"
                    },
                    "path": {
                      "type": "string",
                      "description": "The Schema path where the error ocurred",
                      "format": "json-pointer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "redact-service-config-id": {
        "type": "string",
        "description": "ID of a Redact service configuration",
        "examples": ["pci_wuk7tvtpswyjtlsx52b7yyi2l7zotv4a"]
      },
      "redact-service-config-version": {
        "type": "string",
        "default": "2.0.0",
        "readOnly": true,
        "description": "Configuration version. Current version is `2.0.0`."
      },
      "redact-service-config-name": {
        "type": "string",
        "description": "Human-readable name of the Redact service configuration"
      },
      "redact-service-config-created_at": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp when the configuration was created, in ISO 8601 format. Assigned automatically by the system.",
        "examples": ["2022-10-01T19:07:31.314Z"]
      },
      "redact-service-config-updated_at": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp of the last update to the configuration, in ISO 8601 format. Assigned automatically by the system.",
        "examples": ["2022-10-01T19:07:31.314Z"]
      },
      "redact-service-config-enabled_rules": {
        "type": "array",
        "description": "List of short rule names (rule identifiers) enabled for this configuration. Each rule specifies what to redact and how.",
        "items": {
          "type": "string"
        },
        "uniqueItems": true,
        "default": [],
        "example": ["IP_ADDRESS", "EMAIL_ADDRESS", "US_SSN", "PERSON"]
      },
      "redact-service-config-redactions": {
        "type": "object",
        "description": "Map of short rule names to redaction settings. Each key is a short rule name (for example, `EMAIL_ADDRESS`, `PERSON`), and the corresponding value defines how data matching that rule should be redacted. For example:\n\n```\n{\n  \"hash\": {\n    \"hash_type\": \"md5\"\n  },\n  \"fpe_alphabet\": \"numeric\",\n  \"redaction_type\": \"fpe\",\n  \"partial_masking\": {\n    \"masking_char\": \"*\",\n    \"masking_type\": \"unmask\",\n    \"unmasked_from_left\": 0,\n    \"unmasked_from_right\": 4\n  },\n  \"redaction_value\": \"<US_SSN>\"\n}\n```\n\nNote that in this example, the `redaction_type` is `fpe`, so only the `fpe_alphabet` field is required. Other parameters are included in the rule definition but only take effect if they are relevant to the selected redaction type.",
        "patternProperties": {
          "^.*$": {
            "required": ["redaction_type"],
            "$ref": "#/components/schemas/redact-redaction"
          }
        }
      },
      "redact-service-config-vault_service_config_id": {
        "type": ["string", "null"],
        "title": "Vault Service Config ID",
        "description": "ID of the Vault service configuration used to create and manage the secrets used in this Redact configuration"
      },
      "redact-service-config-salt_vault_secret_id": {
        "type": ["string", "null"],
        "title": "Salt Vault Secret ID",
        "description": "ID of a Vault secret containing the salt value used for hashing. Pangea requires salting to protect against brute-force attacks."
      },
      "redact-service-config-supported_languages": {
        "type": "array",
        "title": "Supported Languages",
        "description": "List of language codes supported by this redaction configuration.",
        "uniqueItems": true,
        "items": {
          "type": "string",
          "enum": ["en"]
        }
      },
      "redact-service-config-enforce_enabled_rules": {
        "default": false,
        "type": "boolean",
        "description": "If true, the rules listed in `enabled_rules` will always be applied to all Redact calls, regardless of request-specific flags"
      },
      "redact-service-config-fpe_vault_secret_id": {
        "type": ["string", "null"],
        "title": "FPE Vault Secret ID",
        "description": "ID of the Vault secret containing the encryption key used with FF3 algorithms for Format-Preserving Encryption (FPE)."
      },
      "redact-service-config-rules": {
        "type": "object",
        "description": "Map of custom rule identifiers to their definitions. Each key is a unique rule name, and each value is a redaction rule object that specifies how to detect and process a particular entity.",
        "patternProperties": {
          "^.*$": {
            "$ref": "#/components/schemas/redact-rule-v2"
          }
        }
      },
      "redact-service-config-rulesets": {
        "type": "object",
        "description": "Map of ruleset identifiers to ruleset definitions. Each key is a unique ruleset name, and each value defines a custom set of redaction rules.",
        "properties": {
          "^.*$": {
            "$ref": "#/components/schemas/redact-ruleset-v2"
          }
        }
      },
      "redact-rule-v1": {
        "type": "object",
        "required": ["entity_name", "matchers", "ruleset"],
        "additionalProperties": false,
        "properties": {
          "entity_name": {
            "type": "string",
            "description": "Name of the entity this rule detects (for example, `EMAIL_ADDRESS`, `US_SSN`)"
          },
          "matchers": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": ["match_type", "match_value", "match_score"],
                      "properties": {
                        "match_type": {
                          "type": "string",
                          "const": "starts_with"
                        },
                        "match_value": {
                          "type": "string",
                          "description": "String that the matched value must start with"
                        },
                        "match_score": {
                          "type": "number",
                          "minimum": 0.1,
                          "maximum": 1.0,
                          "description": "Confidence score required for this matcher"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["match_type", "match_value", "match_score"],
                      "properties": {
                        "match_type": {
                          "type": "string",
                          "const": "regex"
                        },
                        "match_value": {
                          "type": "string",
                          "format": "regex",
                          "description": "Regular expression used to detect the text pattern"
                        },
                        "match_score": {
                          "type": "number",
                          "minimum": 0.1,
                          "maximum": 1.0,
                          "description": "Confidence score required for this matcher"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "string",
                "enum": [
                  "CREDIT_CARD",
                  "CRYPTO",
                  "DATE_TIME",
                  "EMAIL_ADDRESS",
                  "IBAN_CODE",
                  "IP_ADDRESS",
                  "NRP",
                  "LOCATION",
                  "PERSON",
                  "PHONE_NUMBER",
                  "MEDICAL_LICENSE",
                  "URL",
                  "US_BANK_NUMBER",
                  "US_DRIVER_LICENSE",
                  "US_ITIN",
                  "US_PASSPORT",
                  "US_SSN",
                  "UK_NHS",
                  "NIF",
                  "FIN/NRIC",
                  "ABA_ROUTING_NUMBER",
                  "AU_ABN",
                  "AU_ACN",
                  "AU_TFN",
                  "AU_MEDICARE",
                  "FIREBASE_URL",
                  "RSA_PRIVATE_KEY",
                  "SSH_DSA_PRIVATE_KEY",
                  "SSH_EC_PRIVATE_KEY",
                  "PGP_PRIVATE_KEY_BLOCK",
                  "AMAZON_AWS_ACCESS_KEY_ID",
                  "AMAZON_AWS_SECRET_ACCESS_KEY",
                  "AMAZON_MWS_AUTH_TOKEN",
                  "FACEBOOK_ACCESS_TOKEN",
                  "GITHUB_ACCESS_TOKEN",
                  "JWT_TOKEN",
                  "GOOGLE_API_KEY",
                  "GOOGLE_CLOUD_PLATFORM_API_KEY",
                  "GOOGLE_DRIVE_API_KEY",
                  "GOOGLE_CLOUD_PLATFORM_SERVICE_ACCOUNT",
                  "GOOGLE_GMAIL_API_KEY",
                  "YOUTUBE_API_KEY",
                  "MAILCHIMP_API_KEY",
                  "MAILGUN_API_KEY",
                  "MONEY",
                  "BASIC_AUTH",
                  "PICATIC_API_KEY",
                  "SLACK_TOKEN",
                  "SLACK_WEBHOOK",
                  "STRIPE_API_KEY",
                  "STRIPE_RESTRICTED_API_KEY",
                  "SQUARE_ACCESS_TOKEN",
                  "SQUARE_OAUTH_SECRET",
                  "TWILIO_API_KEY",
                  "PANGEA_TOKEN",
                  "PROFANITY"
                ],
                "description": "Reference to a predefined entity type to use as a matcher (for example, `US_SSN`, `EMAIL_ADDRESS`)."
              }
            ]
          },
          "ruleset": {
            "type": "string",
            "description": "Identifier of the ruleset this rule belongs to"
          },
          "match_threshold": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 1.0,
            "description": "Threshold score required for the rule to trigger a match"
          },
          "context_values": {
            "type": ["array", "null"],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "description": "List of context keywords that support positive identification"
          },
          "name": {
            "type": "string",
            "description": "Name for the rule"
          },
          "description": {
            "type": "string",
            "description": "Description of what the rule detects"
          }
        }
      },
      "redact-rule-v2": {
        "type": "object",
        "required": ["entity_name", "matchers"],
        "additionalProperties": false,
        "properties": {
          "entity_name": {
            "type": "string",
            "description": "Name of the entity this rule detects (for example, `EMAIL_ADDRESS`, `US_SSN`)"
          },
          "matchers": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": ["match_type", "match_value", "match_score"],
                      "properties": {
                        "match_type": {
                          "type": "string",
                          "const": "starts_with"
                        },
                        "match_value": {
                          "type": "string",
                          "description": "String that the matched value must start with"
                        },
                        "match_score": {
                          "type": "number",
                          "minimum": 0.1,
                          "maximum": 1.0,
                          "description": "Confidence score required for this matcher"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["match_type", "match_value", "match_score"],
                      "properties": {
                        "match_type": {
                          "type": "string",
                          "const": "regex"
                        },
                        "match_value": {
                          "type": "string",
                          "format": "regex",
                          "description": "Regular expression used to detect the pattern"
                        },
                        "match_score": {
                          "type": "number",
                          "minimum": 0.1,
                          "maximum": 1.0,
                          "description": "Confidence score required for this matcher"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "string",
                "enum": [
                  "CREDIT_CARD",
                  "CRYPTO",
                  "DATE_TIME",
                  "EMAIL_ADDRESS",
                  "IBAN_CODE",
                  "IP_ADDRESS",
                  "NRP",
                  "LOCATION",
                  "PERSON",
                  "PHONE_NUMBER",
                  "MEDICAL_LICENSE",
                  "URL",
                  "US_BANK_NUMBER",
                  "US_DRIVER_LICENSE",
                  "US_ITIN",
                  "US_PASSPORT",
                  "US_SSN",
                  "UK_NHS",
                  "NIF",
                  "FIN/NRIC",
                  "ABA_ROUTING_NUMBER",
                  "AU_ABN",
                  "AU_ACN",
                  "AU_TFN",
                  "AU_MEDICARE",
                  "FIREBASE_URL",
                  "RSA_PRIVATE_KEY",
                  "SSH_DSA_PRIVATE_KEY",
                  "SSH_EC_PRIVATE_KEY",
                  "PGP_PRIVATE_KEY_BLOCK",
                  "AMAZON_AWS_ACCESS_KEY_ID",
                  "AMAZON_AWS_SECRET_ACCESS_KEY",
                  "AMAZON_MWS_AUTH_TOKEN",
                  "FACEBOOK_ACCESS_TOKEN",
                  "GITHUB_ACCESS_TOKEN",
                  "JWT_TOKEN",
                  "GOOGLE_API_KEY",
                  "GOOGLE_CLOUD_PLATFORM_API_KEY",
                  "GOOGLE_DRIVE_API_KEY",
                  "GOOGLE_CLOUD_PLATFORM_SERVICE_ACCOUNT",
                  "GOOGLE_GMAIL_API_KEY",
                  "YOUTUBE_API_KEY",
                  "MAILCHIMP_API_KEY",
                  "MAILGUN_API_KEY",
                  "BASIC_AUTH",
                  "PICATIC_API_KEY",
                  "SLACK_TOKEN",
                  "SLACK_WEBHOOK",
                  "STRIPE_API_KEY",
                  "STRIPE_RESTRICTED_API_KEY",
                  "SQUARE_ACCESS_TOKEN",
                  "SQUARE_OAUTH_SECRET",
                  "TWILIO_API_KEY",
                  "PANGEA_TOKEN",
                  "PROFANITY"
                ],
                "description": "Reference to a predefined entity type to use as a matcher (for example, `US_SSN`, `EMAIL_ADDRESS`)."
              }
            ]
          },
          "match_threshold": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 1.0,
            "description": "Threshold score required for the rule to trigger a match"
          },
          "context_values": {
            "type": ["array", "null"],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "description": "List of context keywords that support positive identification"
          },
          "negative_context_values": {
            "type": ["array", "null"],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "description": "List of context keywords that suppress matches"
          },
          "name": {
            "type": "string",
            "description": "Name for the rule"
          },
          "description": {
            "type": "string",
            "description": "Description of what the rule detects"
          }
        }
      },
      "redact-ruleset-v1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the ruleset"
          },
          "description": {
            "type": "string",
            "description": "Description of the ruleset's purpose or scope"
          }
        }
      },
      "redact-ruleset-v2": {
        "type": "object",
        "description": "Defines a customizable set of redaction rules",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the ruleset"
          },
          "description": {
            "type": "string",
            "description": "Description of the ruleset's purpose or scope"
          },
          "rules": {
            "type": "array",
            "description": "List of rule identifiers included in this ruleset.",
            "items": {
              "type": "string"
            },
            "example": ["DATE_TIME", "IP_ADDRESS", "URL", "MONEY", "my-rule"]
          }
        },
        "required": ["name", "rules"],
        "additionalProperties": false
      },
      "redact-redaction": {
        "type": "object",
        "description": "Configuration for the redaction method applied to detected values.\n\nEach rule supports one redaction type, such as masking, replacement, hashing, Format-Preserving Encryption (FPE), or detection-only mode. Additional parameters may be required depending on the selected redaction type.\n\nFor more details, see the [Redaction Methods](https://pangea.cloud/docs/redact/using-redact/redact-rules#redaction-methods) documentation.",
        "oneOf": [
          {
            "properties": {
              "redaction_type": {
                "enum": ["mask", "detect_only"]
              }
            }
          },
          {
            "required": ["redaction_value"],
            "properties": {
              "redaction_type": {
                "const": "replacement"
              }
            }
          },
          {
            "required": ["partial_masking"],
            "properties": {
              "redaction_type": {
                "const": "partial_masking"
              }
            }
          },
          {
            "required": ["hash"],
            "properties": {
              "redaction_type": {
                "const": "hash"
              }
            }
          },
          {
            "required": ["fpe_alphabet"],
            "properties": {
              "redaction_type": {
                "const": "fpe"
              }
            }
          }
        ],
        "properties": {
          "redaction_type": {
            "type": "string",
            "enum": [
              "mask",
              "partial_masking",
              "replacement",
              "hash",
              "detect_only",
              "fpe"
            ],
            "description": "Redaction method to apply for this rule"
          },
          "redaction_value": {
            "type": "string",
            "description": "Replacement string to use when `redaction_type` is `replacement`"
          },
          "partial_masking": {
            "type": "object",
            "description": "Controls how text is masked when `redaction_type` is `partial_masking`",
            "properties": {
              "masking_type": {
                "type": "string",
                "enum": ["unmask", "mask"],
                "default": "unmask",
                "description": "Defines the masking strategy. Use `unmask` to specify how many characters to keep visible. Use `mask` to specify how many to hide."
              },
              "unmasked_from_left": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of leading characters to leave unmasked when `masking_type` is `unmask`"
              },
              "unmasked_from_right": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of trailing characters to leave unmasked when `masking_type` is `unmask`"
              },
              "masked_from_left": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of leading characters to mask when `masking_type` is `mask`"
              },
              "masked_from_right": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of trailing characters to mask when `masking_type` is `mask`"
              },
              "chars_to_ignore": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 1
                },
                "description": "List of characters that should not be masked (for example, hyphens or periods)"
              },
              "masking_char": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "default": "*",
                "description": "Character to use when masking text"
              }
            }
          },
          "hash": {
            "type": ["object", "null"],
            "required": ["hash_type"],
            "description": "Hash configuration when `redaction_type` is `hash`",
            "properties": {
              "hash_type": {
                "type": "string",
                "enum": ["md5", "sha256"],
                "description": "Hashing algorithm to use for redaction"
              }
            }
          },
          "fpe_alphabet": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "numeric",
                  "alphalower",
                  "alphaupper",
                  "alpha",
                  "alphanumericlower",
                  "alphanumericupper",
                  "alphanumeric"
                ]
              },
              {
                "type": "null"
              }
            ],
            "description": "Alphabet used for Format-Preserving Encryption (FPE). Determines the character set for encryption."
          },
          "fpe_tweak_vault_secret_id": {
            "type": ["string", "null"],
            "description": "ID of a Vault secret containing the tweak value used for Format-Preserving Encryption (FPE). Enables deterministic encryption, ensuring that identical inputs produce consistent encrypted outputs."
          },
          "fpe_tweak": {
            "type": ["string", "null"],
            "minLength": 7,
            "maxLength": 7,
            "pattern": "^[a-zA-Z0-9]{7}$",
            "description": "Tweak value used for Format-Preserving Encryption (FPE). Enables deterministic encryption, ensuring that identical inputs produce consistent encrypted outputs."
          }
        }
      },
      "redact-default-rules": {
        "type": "object",
        "required": ["default_rules", "default_rulesets", "default_redactions"],
        "properties": {
          "default_rules": {
            "patternProperties": {
              "^.*$": {
                "$ref": "#/components/schemas/redact-rule-v2"
              }
            }
          },
          "default_rulesets": {
            "patternProperties": {
              "^.*$": {
                "$ref": "#/components/schemas/redact-ruleset-v2"
              }
            }
          },
          "default_redactions": {
            "patternProperties": {
              "^.*$": {
                "$ref": "#/components/schemas/redact-redaction"
              }
            }
          }
        }
      },
      "redact-service-config": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/redact-service-config-v1"
          },
          {
            "$ref": "#/components/schemas/redact-service-config-v2"
          }
        ]
      },
      "redact-service-config-v1": {
        "title": "redact-service-config-v1",
        "type": "object",
        "additionalProperties": false,
        "oneOf": [
          {
            "required": ["salt_vault_secret_id"],
            "properties": {
              "salt_vault_secret_id": {
                "type": "string",
                "title": "Salt Vault Secret ID",
                "description": "ID of a Vault secret containing the salt value used for hashing."
              }
            },
            "dependentSchemas": {
              "salt_vault_secret_id": {
                "required": ["vault_service_config_id"],
                "properties": {
                  "vault_service_config_id": {
                    "type": "string",
                    "description": "ID of the Vault service configuration used to store the secret"
                  }
                }
              }
            }
          },
          {
            "properties": {
              "salt_vault_secret_id": {
                "type": "null"
              }
            }
          }
        ],
        "properties": {
          "version": {
            "type": "string",
            "default": "1.0.0",
            "readOnly": true,
            "description": "Configuration version"
          },
          "id": {
            "$ref": "#/components/schemas/redact-service-config-id"
          },
          "name": {
            "$ref": "#/components/schemas/redact-service-config-name"
          },
          "updated_at": {
            "$ref": "#/components/schemas/redact-service-config-updated_at"
          },
          "enabled_rules": {
            "$ref": "#/components/schemas/redact-service-config-enabled_rules"
          },
          "redactions": {
            "$ref": "#/components/schemas/redact-service-config-redactions"
          },
          "vault_service_config_id": {
            "$ref": "#/components/schemas/redact-service-config-vault_service_config_id"
          },
          "salt_vault_secret_id": {
            "$ref": "#/components/schemas/redact-service-config-salt_vault_secret_id"
          },
          "rules": {
            "type": "object",
            "description": "Map of custom rule identifiers to rule definitions. Each key is a unique rule ID, and the value is a redaction rule object.",
            "patternProperties": {
              "^.*$": {
                "$ref": "#/components/schemas/redact-rule-v1"
              }
            }
          },
          "rulesets": {
            "type": "object",
            "properties": {
              "^.*$": {
                "$ref": "#/components/schemas/redact-ruleset-v1"
              }
            }
          },
          "supported_languages": {
            "$ref": "#/components/schemas/redact-service-config-supported_languages"
          }
        }
      },
      "redact-service-config-v2": {
        "title": "redact-service-config-v2",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "version": {
            "$ref": "#/components/schemas/redact-service-config-version"
          },
          "id": {
            "$ref": "#/components/schemas/redact-service-config-id"
          },
          "name": {
            "$ref": "#/components/schemas/redact-service-config-name"
          },
          "updated_at": {
            "$ref": "#/components/schemas/redact-service-config-updated_at"
          },
          "enabled_rules": {
            "$ref": "#/components/schemas/redact-service-config-enabled_rules"
          },
          "enforce_enabled_rules": {
            "$ref": "#/components/schemas/redact-service-config-enforce_enabled_rules"
          },
          "redactions": {
            "$ref": "#/components/schemas/redact-service-config-redactions"
          },
          "vault_service_config_id": {
            "$ref": "#/components/schemas/redact-service-config-vault_service_config_id"
          },
          "salt_vault_secret_id": {
            "$ref": "#/components/schemas/redact-service-config-salt_vault_secret_id"
          },
          "fpe_vault_secret_id": {
            "$ref": "#/components/schemas/redact-service-config-fpe_vault_secret_id"
          },
          "rules": {
            "$ref": "#/components/schemas/redact-service-config-rules"
          },
          "rulesets": {
            "$ref": "#/components/schemas/redact-service-config-rulesets"
          },
          "supported_languages": {
            "$ref": "#/components/schemas/redact-service-config-supported_languages"
          }
        }
      },
      "redact-service-config-result": {
        "required": ["id", "version", "name", "enabled_rules", "updated_at"],
        "oneOf": [
          {
            "$ref": "#/components/schemas/redact-service-config-v1"
          },
          {
            "$ref": "#/components/schemas/redact-service-config-v2"
          }
        ]
      },
      "redact-service-config-list": {
        "type": "object",
        "additionalProperties": false,
        "description": "List or filter/search records.",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Only records where id equals this value.",
                "nullable": false,
                "type": "string"
              },
              "id__contains": {
                "description": "Only records where id includes each substring.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "id__in": {
                "description": "Only records where id equals one of the provided substrings.",
                "items": {
                  "description": "A substring to check for.",
                  "type": "string"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Only records where created_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "created_at__gt": {
                "description": "Only records where created_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__gte": {
                "description": "Only records where created_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lt": {
                "description": "Only records where created_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "created_at__lte": {
                "description": "Only records where created_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at": {
                "description": "Only records where updated_at equals this value.",
                "format": "date-time",
                "nullable": false,
                "type": "string"
              },
              "updated_at__gt": {
                "description": "Only records where updated_at is greater than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__gte": {
                "description": "Only records where updated_at is greater than or equal to this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lt": {
                "description": "Only records where updated_at is less than this value.",
                "format": "date-time",
                "type": "string"
              },
              "updated_at__lte": {
                "description": "Only records where updated_at is less than or equal to this value.",
                "format": "date-time",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "last": {
            "description": "Reflected value from a previous response to obtain the next page of results.",
            "type": "string"
          },
          "order": {
            "description": "Order results asc(ending) or desc(ending).",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "order_by": {
            "description": "Which field to order results by.",
            "enum": ["id", "created_at", "updated_at"],
            "type": "string"
          },
          "size": {
            "description": "Maximum results to include in the response.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": []
      },
      "redact-debug-report": {
        "type": "object",
        "description": "Describes the decision process for redactions",
        "required": ["summary_counts", "recognizer_results"],
        "properties": {
          "summary_counts": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "integer",
                "example": 0
              }
            }
          },
          "recognizer_results": {
            "description": "The scoring result of a rule",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "field_type",
                "score",
                "text",
                "start",
                "end",
                "redacted"
              ],
              "properties": {
                "field_type": {
                  "type": "string",
                  "description": "The entity name"
                },
                "score": {
                  "type": "number",
                  "description": "The certainty score that the entity matches this specific snippet"
                },
                "text": {
                  "type": "string",
                  "description": "The text snippet that matched"
                },
                "start": {
                  "type": "integer",
                  "description": "The starting index of a snippet"
                },
                "end": {
                  "type": "integer",
                  "description": "The ending index of a snippet"
                },
                "redacted": {
                  "type": "boolean",
                  "description": "Indicates if this rule was used to anonymize a text snippet"
                },
                "data_key": {
                  "type": ["string", "null"],
                  "description": "If this result relates to a specific structured text field, the key pointing to this text will be provided"
                },
                "context_results": {
                  "type": ["object", "null"],
                  "description": "Context information If context was applied to score",
                  "$ref": "#/components/schemas/context-score-result"
                },
                "negative_context_results": {
                  "type": ["object", "null"],
                  "description": "Context information If negative context was applied to score",
                  "$ref": "#/components/schemas/context-score-result"
                }
              }
            }
          }
        }
      },
      "context-score-result": {
        "required": ["word", "start", "end", "score_augment"],
        "properties": {
          "word": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "rules-param": {
        "type": "array",
        "description": "An array of redact rule short names",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      "rulesets-param": {
        "type": "array",
        "description": "An array of redact ruleset short names",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      "redaction-method-overrides": {
        "type": "object",
        "description": "This field allows users to specify the redaction method per rule and its various parameters.\n\nFor example: \n```json\n{\n  \"EMAIL_ADDRESS\": {\n    \"redaction_type\": \"fpe\",\n    \"fpe_alphabet\": \"alphanumeric\",\n    \"fpe_tweak\": \"U05wczz\"\n  }\n}\n```\n\nLearn more in the [Redacting Data](https://pangea.cloud/docs/redact/using-redact/using-redact#redaction_method_overrides) documentation.",
        "additionalProperties": {
          "$ref": "#/components/schemas/redact-redaction"
        },
        "examples": [
          {
            "US_SSN": {
              "redaction_type": "mask"
            }
          }
        ]
      },
      "fpe-context": {
        "type": "string",
        "format": "base64",
        "description": "If an FPE redaction method returned results, this will be the context passed to unredact."
      },
      "vault-params": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fpe_key_id": {
            "type": "string",
            "description": "A vault key ID of an exportable key used to redact with FPE instead of using the service config default.",
            "format": "pangea-id",
            "pattern": "^pvi_[a-z2-7]{32}$"
          },
          "salt_secret_id": {
            "type": "string",
            "description": "A vault secret ID of a secret used to salt a hash instead of using the service config default.",
            "format": "pangea-id",
            "pattern": "^pvi_[a-z2-7]{32}$"
          }
        }
      }
    },
    "securitySchemes": {
      "APIToken": {
        "type": "http",
        "bearerFormat": "token",
        "description": "Pangea API Token",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "redact",
      "description": "Remove sensitive info from a string"
    },
    {
      "name": "config-management",
      "description": "Config Management"
    }
  ]
}
