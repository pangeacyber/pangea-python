.pangea-sdk-base:
  before_script:
    - cd packages/pangea-sdk/
    - pip install poetry
    - poetry install
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

.pangea-sdk-gcp:
  before_script:
    - ./dev/replace_aws_with_gcp_env_var.sh
    - cd packages/pangea-sdk/
    - pip install poetry
    - poetry install
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

.pangea-sdk-publish:
  before_script:
    - cd packages/pangea-sdk/
    - pip install poetry
    - poetry install
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
      changes:
        - packages/pangea-sdk/**/*
      when: on_success

lint:
  extends: .pangea-sdk-base
  stage: lint
  script:
    - poetry run black .

generate_docs:
  extends: .pangea-sdk-base
  stage: lint
  allow_failure: true
  script:
    - poetry run python parse_module.py > python_sdk.json
  artifacts:
    expire_in: 1 month
    expose_as: python_sdk
    paths: ['packages/pangea-sdk/python_sdk.json']
    when: on_success

type_check:
  extends: .pangea-sdk-base
  stage: lint
  needs: []
  script:
    - poetry run mypy pangea tests

testing:
  extends: .pangea-sdk-base
  stage: unit_tests
  script:
    - poetry run python -m unittest tests.unit

integration-aws:
  extends: .pangea-sdk-base
  stage: integration_tests_aws
  script:
    - poetry run python -m unittest tests.integration

integration-gcp:
  extends: .pangea-sdk-gcp
  stage: integration_tests_gcp
  script:
    - poetry run python -m unittest tests.integration

asyncio-integration-aws:
  extends: .pangea-sdk-base
  stage: asyncio_tests_aws
  script:
    - poetry run python -m unittest tests.integration.asyncio

asyncio-integration-gcp:
  extends: .pangea-sdk-gcp
  stage: asyncio_tests_gcp
  script:
    - poetry run python -m unittest tests.integration.asyncio

building:
  extends: .pangea-sdk-publish
  stage: build
  script:
    - poetry build
    - poetry publish --username __token__ --password $PYPI_SDK_TOKEN
