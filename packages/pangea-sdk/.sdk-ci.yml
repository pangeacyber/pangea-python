.sdk-base:
  before_script:
    - !reference [.setup, update-pip]
    - !reference [.setup, update-poetry]

    - cd packages/pangea-sdk/
    - poetry check
    - poetry install
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

.sdk-test-base:
  retry: 2
  variables:
    # Set each service test environment
    SERVICE_AUDIT_ENV: LVE
    SERVICE_AUTHN_ENV: LVE
    SERVICE_EMBARGO_ENV: LVE
    SERVICE_FILE_SCAN_ENV: LVE
    SERVICE_IP_INTEL_ENV: LVE
    SERVICE_DOMAIN_INTEL_ENV: LVE
    SERVICE_URL_INTEL_ENV: LVE
    SERVICE_FILE_INTEL_ENV: LVE
    SERVICE_USER_INTEL_ENV: LVE
    SERVICE_REDACT_ENV: LVE
    SERVICE_VAULT_ENV: LVE

  before_script:
    - echo ${ENV}
    - echo ${CLOUD}
    - echo ${TEST}
    # Update environment variables
    # Domain
    - export PANGEA_INTEGRATION_DOMAIN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_DOMAIN_${ENV}_${CLOUD})"
    # Tokens
    - export PANGEA_INTEGRATION_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}_${CLOUD})"
    # Config IDs
    - export PANGEA_AUDIT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_2_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_3_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_3_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_2_${ENV}_${CLOUD})"

    - !reference [.setup, update-pip]
    - !reference [.setup, update-poetry]

    - cd packages/pangea-sdk/
    - poetry check
    - poetry install
  parallel:
    matrix:
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUDIT_ENV}
        TEST: test_audit
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUTHN_ENV}
        TEST: test_authn
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_EMBARGO_ENV}
        TEST: test_embargo
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_DOMAIN_INTEL_ENV}
        TEST: test_intel.TestDomainIntel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_IP_INTEL_ENV}
        TEST: test_intel.TestIPIntel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_URL_INTEL_ENV}
        TEST: test_intel.TestURLIntel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_USER_INTEL_ENV}
        TEST: test_intel.TestUserIntel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_INTEL_ENV}
        TEST: test_intel.TestFileIntel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_SCAN_ENV}
        TEST: test_file_scan
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_REDACT_ENV}
        TEST: test_redact
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_VAULT_ENV}
        TEST: test_vault
  rules:
    - if: '$CI_COMMIT_BRANCH && $CLOUD == "GCP" && $TEST == "test_file_scan"'
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH && $CLOUD == "GCP" && $TEST != "test_file_scan"'
      allow_failure: false
    - if: '$CI_COMMIT_BRANCH && $CLOUD != "GCP"'
      allow_failure: false

sdk-build:
  extends: .sdk-base
  stage: build
  script:
    - poetry build
  artifacts:
    paths: ["packages/pangea-sdk/dist"]
    when: on_success

sdk-integration-tests:
  extends: .sdk-test-base
  stage: integration_tests
  script:
    - poetry run python -m unittest tests.integration.${TEST}

# TODO: Add asyncio tests when upgrade python 3.8
# sdk-asyncio-integration-tests:
#   extends: .sdk-test-base
#   stage: integration_tests
#   script:
#     - poetry run python -m unittest tests.integration.asyncio.${TEST}

sdk-publish:
  extends: .sdk-base
  stage: publish
  needs: [sdk-build]
  script:
    - bash ../../dev/validate_tag.sh $CI_COMMIT_TAG
    - poetry publish --username __token__ --password $PYPI_SDK_TOKEN
  rules:
    - if: $CI_COMMIT_TAG =~ /pangea-sdk\/.+/
